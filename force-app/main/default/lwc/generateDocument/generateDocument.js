import { LightningElement , api, track, wire} from 'lwc';
import getCombinedData from '@salesforce/apex/GenerateDocumentController.getCombinedData';
import getSessionId from '@salesforce/apex/GenerateDocumentController.getSessionId';
import storeInFiles from '@salesforce/apex/GenerateDocumentController.storeInFiles';
import postToChatter from '@salesforce/apex/GenerateDocumentController.postToChatter';
import sendEmail from '@salesforce/apex/GenerateDocumentController.sendEmail';
import upsertActivity from '@salesforce/apex/GenerateDocumentController.upsertActivity';
import getButtonNames from '@salesforce/apex/GenerateDocumentController.getButtonNames';
import createListViewButtons from '@salesforce/apex/ButtonGeneratorController.createListViewButtons';
import {navigationComps, nameSpace, errorDebugger} from 'c/globalProperties';
import { NavigationMixin, CurrentPageReference } from 'lightning/navigation';
import { CloseActionScreenEvent } from "lightning/actions";

//CSV Generation methods
import getTemplateData from '@salesforce/apex/GenerateDocumentController.getTemplateData';

//External Storage Methods
import uploadToDropBox from '@salesforce/apex/UploadController.uploadToDropBox';
import uploadToOneDrive from '@salesforce/apex/UploadController.uploadToOneDrive';
import uploadToAWS from '@salesforce/apex/UploadController.uploadToAWS';
import uploadToGoogleDrive from '@salesforce/apex/UploadController.uploadToGoogleDrive';

//Defaults Generation methods
import setDefaultOptions from '@salesforce/apex/GenerateDocumentController.setDefaultOptions';
import getTemplateDefaultValues from '@salesforce/apex/GenerateDocumentController.getTemplateDefaultValues';

//Delete content version if needed
import deleteContentVersion from '@salesforce/apex/GenerateDocumentController.deleteContentVersion';
export default class GenerateDocument extends NavigationMixin(LightningElement) {

    @track showSpinner = true;
    @track labelOfLoader = 'Loading...';


    //Data from record
    @api recordId;
    @api objectApiName;

    @track _internalObjectApiName;
    get internalObjectApiName() {
        return this._internalObjectApiName || this.objectApiName;
    }
    set internalObjectApiName(value) {
        this._internalObjectApiName = value;
    }
    @api calledFromWhere;
    @api templateTypeFromParent;
    @api templateIdFromParent;
    @api templateNameFromParent;
    @track buttonLabel;
    @track buttonName;
    @track bottomBtnLabel = 'Create Custom Button';
    allButtons = [];
    @track isOldButton = false;
    get buttonType(){
        return this.isCSVTemplate ? 'List View' : 'Quick Action';
    }
    @track hideHeader = false;

    @track isCalledFromDefaults = false;
    @track isCalledFromPreview = false;


    @track showAllTemplates = false;
    @track noTemplateFound = false;
    @track templateSearchKey ='';

    @track allTemplates = [];
    @track activeTemplates = [];
    @track templateList = [];

    @track selectedTemplate = null;
    @track showEmailSection = false;
    @track showCC = false;
    @track showBCC = false;

    @track toEmails = [];
    @track ccEmails = [];
    @track bccEmails = [];

    @track isToError = false;
    @track isCcError = false;
    @track isBccError = false;

    @track emailSubject = '';
    @track emailBody = '';
    @track previewEmailBody = '';

    isInitialStyleLoaded = false;

    //Objects for options

    @track documentTypes = [
        {
            paths: [
                {
                    fill:"black",
                    path:"M24.3547 10.3728H23.6496V7.01243C23.649 6.99109 23.6469 6.9698 23.6434 6.94874C23.6445 6.81359 23.5961 6.6826 23.5071 6.57994L17.8464 0.194162L17.8422 0.190053C17.7704 0.112995 17.6787 0.0565585 17.577 0.0267101L17.5458 0.0164368C17.5026 0.00579487 17.4583 0.000277178 17.4138 0H3.50168C2.86624 0 2.3504 0.510574 2.3504 1.13723V10.3728H1.64528C0.73632 10.3728 0 11.1001 0 11.998V20.4507C0 21.3475 0.73736 22.0759 1.64528 22.0759H2.3504V27.8628C2.3504 28.4894 2.86624 29 3.50168 29H22.4983C23.1327 29 23.6496 28.4894 23.6496 27.8628V22.0759H24.3547C25.2637 22.0759 26 21.3475 26 20.4507V11.998C26 11.1001 25.2626 10.3728 24.3547 10.3728ZM3.50168 1.13723H16.8376V6.95593C16.8376 7.27029 17.0955 7.52403 17.4138 7.52403H22.4994V10.3728H3.50168V1.13723ZM17.6353 16.2695C17.6353 17.8948 17.0362 19.0166 16.2053 19.709C15.3005 20.4517 13.9235 20.8051 12.2398 20.8051C11.232 20.8051 10.5186 20.7414 10.0329 20.6798V12.339C10.7474 12.226 11.6782 12.1634 12.661 12.1634C14.2927 12.1634 15.3514 12.4531 16.1803 13.0705C17.0737 13.7249 17.6353 14.7707 17.6353 16.2695ZM2.62184 20.7178V12.339C3.22088 12.2384 4.06328 12.1634 5.24888 12.1634C6.448 12.1634 7.30288 12.3904 7.87592 12.8435C8.424 13.2718 8.7932 13.9776 8.7932 14.8087C8.7932 15.6408 8.51344 16.3456 8.0028 16.8243C7.33928 17.4417 6.35752 17.7191 5.20936 17.7191C4.95456 17.7191 4.72472 17.7068 4.54688 17.6811V20.7178H2.62184ZM22.4983 27.5546H3.50168V22.0759H22.4983V27.5546ZM24.1665 13.8009H20.8624V15.7415H23.9491V17.304H20.8624V20.7178H18.9124V12.226H24.1665V13.8009Z"
                }
            ],
            name:"PDF",
            viewBox: "0 0 25 29",
            isSelected : false,
            extension: '.pdf',
            isDisabled : false,
        },
        {
            paths: [
                {
                    fill:"black",
                    path:"M24.3547 10.3732H23.6497V7.01322C23.6497 6.99211 23.6464 6.97117 23.6435 6.94975C23.6424 6.81635 23.5993 6.68529 23.5069 6.58162L17.8465 0.194377C17.8448 0.192737 17.8431 0.192155 17.842 0.190516C17.8082 0.15328 17.7689 0.12218 17.7272 0.0955223C17.715 0.0872183 17.7025 0.0803953 17.6896 0.0733607C17.6537 0.0540552 17.6154 0.0378175 17.5761 0.0261285C17.5654 0.0233781 17.5558 0.019041 17.5452 0.0161848C17.5024 0.00624121 17.458 0 17.4131 0H3.50171C2.8665 0 2.35043 0.510351 2.35043 1.13728V10.3728H1.64556C0.736839 10.3728 0 11.1004 0 11.9982V20.4508C0 21.3482 0.736839 22.0765 1.64556 22.0765H2.35043V27.8628C2.35043 28.4898 2.8665 29 3.50171 29H22.4983C23.133 29 23.6496 28.4898 23.6496 27.8628V22.0765H24.3546C25.2631 22.0765 26 21.3485 26 20.4511V11.9985C26.0001 11.1007 25.2631 10.3732 24.3547 10.3732ZM3.50171 1.13754H16.8374V6.95594C16.8374 7.27011 17.0953 7.52457 17.4131 7.52457H22.4984V10.3734H3.50171V1.13754ZM18.0013 17.7635C18.4212 17.7635 18.8873 17.6735 19.1614 17.5647L19.3711 18.6384C19.1158 18.7641 18.5406 18.9002 17.7919 18.9002C15.6635 18.9002 14.5682 17.5922 14.5682 15.8604C14.5682 13.7857 16.0658 12.6311 17.9288 12.6311C18.6498 12.6311 19.1981 12.7759 19.4447 12.9019L19.1617 13.9935C18.8786 13.8758 18.4862 13.7681 17.9927 13.7681C16.8875 13.7681 16.0296 14.4262 16.0296 15.7794C16.0293 16.996 16.7598 17.7635 18.0013 17.7635ZM13.9372 15.7072C13.9372 17.7004 12.7135 18.9091 10.9149 18.9091C9.08827 18.9091 8.01987 17.5467 8.01987 15.8152C8.01987 13.9933 9.19761 12.6308 11.0152 12.6308C12.9061 12.6308 13.9372 14.0294 13.9372 15.7072ZM1.94691 18.7831V12.8115C2.45838 12.7304 3.12486 12.6858 3.82796 12.6858C4.99686 12.6858 5.75458 12.893 6.34754 13.3351C6.98714 13.8039 7.38927 14.5528 7.38927 15.6259C7.38927 16.7892 6.96 17.5925 6.36628 18.0884C5.71779 18.6203 4.73165 18.8733 3.52597 18.8733C2.80519 18.8731 2.29378 18.8277 1.94691 18.7831ZM22.4984 27.5548H3.50171V22.0765H22.4983V27.5548H22.4984ZM23.5538 18.8097L22.9965 17.7093C22.7682 17.2856 22.6221 16.9694 22.4487 16.6179H22.4303C22.3025 16.9699 22.1476 17.2856 21.9559 17.7093L21.4444 18.8097H19.8554L21.636 15.7336L19.9197 12.7301H21.518L22.0565 13.84C22.2393 14.2091 22.3758 14.5072 22.5221 14.8498H22.54C22.6861 14.462 22.8053 14.1915 22.96 13.84L23.4805 12.7301H25.0699L23.3347 15.6975L25.1608 18.8097H23.5538Z M5.68264 15.6301C5.69114 14.4111 4.97142 13.7664 3.82143 13.7664C3.52245 13.7664 3.32963 13.7927 3.21533 13.8189V17.6591C3.32994 17.6851 3.51426 17.6851 3.68113 17.6851C4.8928 17.6943 5.68264 17.0327 5.68264 15.6301Z M9.12524 15.7434C9.12524 16.8932 9.66971 17.703 10.5653 17.703C11.4697 17.703 11.9871 16.85 11.9871 15.7091C11.9871 14.655 11.4782 13.7492 10.5558 13.7492C9.65159 13.7495 9.12524 14.603 9.12524 15.7434Z"
                }
            ],
            name:"DOCX",
            viewBox: "0 0 24 28",
            isSelected : false,
            extension: '.docx',
            isDisabled : false,
        },
        {
            paths: [
                {
                    fill:"black",
                    path:"M24.3547 10.3742H23.6496V7.01371C23.649 6.99236 23.6469 6.97108 23.6434 6.95001C23.6443 6.81502 23.5955 6.68428 23.5061 6.58222L17.8464 0.195196L17.8422 0.191087C17.8083 0.154918 17.7699 0.123157 17.7278 0.0965706L17.6904 0.0739686C17.6544 0.054221 17.6164 0.038376 17.577 0.0267106L17.5458 0.0164374C17.5026 0.00579507 17.4583 0.000277188 17.4138 0H3.50168C2.86624 0 2.3504 0.510592 2.3504 1.13727V10.3731H1.64528C0.73632 10.3731 0 11.1005 0 11.9984V20.4514C0 21.3483 0.73736 22.0767 1.64528 22.0767H2.3504V27.8627C2.3504 28.4894 2.86624 29 3.50168 29H22.4983C23.1327 29 23.6496 28.4894 23.6496 27.8627V22.0767H24.3547C25.2626 22.0767 26 21.3493 26 20.4514V11.9984C26 11.1015 25.2637 10.3742 24.3547 10.3742ZM3.50168 1.13727H16.8376V6.95618C16.8376 7.27055 17.0955 7.5243 17.4138 7.5243H22.4994V10.3731H3.50168V1.13727ZM12.115 16.7201C10.7172 16.227 9.79472 15.4626 9.79472 14.2555C9.79472 12.8388 11.0053 11.7673 12.9761 11.7673C13.937 11.7673 14.6224 11.9522 15.1216 12.1854L14.6973 13.6884C14.1535 13.4268 13.556 13.2921 12.9511 13.2949C12.1274 13.2949 11.7281 13.6761 11.7281 14.0952C11.7281 14.6253 12.1888 14.8585 13.287 15.2654C14.7722 15.8078 15.4575 16.5711 15.4575 17.7423C15.4575 19.1354 14.3853 20.3179 12.0775 20.3179C11.1166 20.3179 10.1691 20.059 9.69488 19.8001L10.0818 18.2601C10.7348 18.5895 11.4556 18.7666 12.1888 18.7779C13.0624 18.7779 13.5242 18.4193 13.5242 17.8779C13.5242 17.3601 13.1258 17.0653 12.115 16.7201ZM2.20792 16.153C2.20792 13.3309 4.2536 11.7662 6.79744 11.7662C7.78336 11.7662 8.53112 11.9624 8.86808 12.1237L8.46872 13.6144C7.96354 13.4049 7.4202 13.3 6.87232 13.3062C5.37576 13.3062 4.20368 14.2052 4.20368 16.0534C4.20368 17.7043 5.20104 18.7522 6.8848 18.7522C7.47136 18.7522 8.09536 18.6423 8.4812 18.481L8.7568 19.9593C8.41984 20.1186 7.62112 20.3168 6.61128 20.3168C3.70448 20.3179 2.20792 18.519 2.20792 16.153ZM22.4983 27.5566H3.50168V22.0777H22.4983V27.5566ZM20.9612 20.1946H18.7408L16.0472 11.8895H18.1303L19.1526 15.402C19.4386 16.3996 19.7007 17.3365 19.9004 18.371H19.9378C20.1505 17.3838 20.4041 16.4057 20.6981 15.439L21.7714 11.8905H23.791L20.9612 20.1946Z"
                }
            ],
            name:"CSV",
            viewBox: "0 0 25 29",
            isSelected : false,
            extension: '.csv',
            isDisabled : false,
        },
        {
            paths : [
                {
                    fill:"black",
                    path:"M2.85858 2.87732L15.4293 1.0815C15.7027 1.04245 15.9559 1.2324 15.995 1.50577C15.9983 1.52919 16 1.55282 16 1.57648V22.4235C16 22.6996 15.7761 22.9235 15.5 22.9235C15.4763 22.9235 15.4527 22.9218 15.4293 22.9184L2.85858 21.1226C2.36593 21.0522 2 20.6303 2 20.1327V3.86727C2 3.36962 2.36593 2.9477 2.85858 2.87732ZM4 4.73457V19.2654L14 20.694V3.30599L4 4.73457ZM17 19H20V4.99997H17V2.99997H21C21.5523 2.99997 22 3.44769 22 3.99997V20C22 20.5523 21.5523 21 21 21H17V19ZM10.2 12L13 16H10.6L9 13.7143L7.39999 16H5L7.8 12L5 7.99997H7.39999L9 10.2857L10.6 7.99997H13L10.2 12Z"
                }
            ],
            name: "XLS",
            viewBox:"0 0 24 24",
            isSelected : false,
            extension: '.xls',
            isDisabled : false,
        }
    ]

    @track csvDocumentTypes = this.documentTypes.filter(doc => doc.name === 'XLS' || doc.name === 'CSV');
    @track generalDocumentTypes = this.documentTypes.filter(doc => !(doc.name === 'XLS' ||  doc.name === 'CSV'));
    @track internalStorageOptions = [
        {
            paths :[
                {
                    fill:"black",
                    path:"M10.1989 10.1986C11.3807 9.01686 12.9716 8.33459 14.6425 8.29289C16.3133 8.25118 17.9363 8.85323 19.1757 9.97449L19.4115 10.1986L23.0961 13.8841C24.2961 15.0862 24.9791 16.7093 24.9995 18.4076C25.02 20.1059 24.3763 21.7451 23.2056 22.9756C22.0349 24.2062 20.4298 24.9309 18.7324 24.9953C17.0351 25.0596 15.3798 24.4586 14.1192 23.3202L13.8847 23.0961L11.12 20.3316C10.8863 20.0971 10.7507 19.7826 10.7406 19.4517C10.7305 19.1209 10.8467 18.7986 11.0656 18.5503C11.2845 18.3021 11.5897 18.1464 11.9193 18.115C12.2488 18.0837 12.5779 18.1789 12.8398 18.3813L12.9623 18.4895L15.727 21.254C16.4437 21.9748 17.413 22.388 18.4293 22.4061C19.4456 22.4242 20.429 22.0456 21.1709 21.3508C21.9128 20.6559 22.3547 19.6994 22.403 18.6841C22.4514 17.6689 22.1022 16.6747 21.4297 15.9126L21.2538 15.7263L17.5692 12.042C17.2063 11.679 16.7754 11.3911 16.3011 11.1946C15.8268 10.9982 15.3185 10.897 14.8052 10.897C14.2918 10.897 13.7835 10.9982 13.3093 11.1946C12.835 11.3911 12.4041 11.679 12.0411 12.042C11.7967 12.2863 11.4651 12.4235 11.1195 12.4233C10.7739 12.4232 10.4425 12.2858 10.1982 12.0414C9.9539 11.7969 9.81672 11.4654 9.81684 11.1198C9.81697 10.7742 9.95438 10.4429 10.1989 10.1986ZM1.90733 1.90769C3.08921 0.725978 4.68011 0.0437079 6.35097 0.00200035C8.02182 -0.0397072 9.64479 0.562339 10.8842 1.68361L11.12 1.90769L13.8834 4.67349C14.1171 4.90793 14.2527 5.22252 14.2628 5.55336C14.2729 5.8842 14.1567 6.20648 13.9378 6.45475C13.7189 6.70301 13.4136 6.85865 13.0841 6.89003C12.7546 6.92142 12.4255 6.82621 12.1636 6.62375L12.0411 6.51562L9.27772 3.75242C8.55979 3.03923 7.59321 2.63226 6.58132 2.61715C5.56944 2.60203 4.59113 2.97994 3.85222 3.67137C3.11331 4.3628 2.67139 5.31386 2.61945 6.32444C2.56751 7.33503 2.90958 8.32637 3.57371 9.08991L3.7496 9.27751L7.43545 12.9631C8.16842 13.6958 9.16242 14.1074 10.1989 14.1074C11.2353 14.1074 12.2293 13.6958 12.9623 12.9631C13.0832 12.842 13.2268 12.746 13.3849 12.6805C13.543 12.6149 13.7125 12.5812 13.8836 12.5811C14.0547 12.581 14.2242 12.6147 14.3823 12.6801C14.5404 12.7455 14.6841 12.8415 14.8052 12.9624C14.9262 13.0834 15.0223 13.227 15.0878 13.3851C15.1534 13.5431 15.1871 13.7126 15.1872 13.8837C15.1873 14.0548 15.1536 14.2242 15.0882 14.3824C15.0227 14.5405 14.9268 14.6842 14.8058 14.8052C13.624 15.9869 12.033 16.6692 10.3622 16.7109C8.69134 16.7526 7.06837 16.1505 5.829 15.0293L5.59187 14.8052L1.90733 11.1196C0.686066 9.8981 0 8.24156 0 6.51431C0 4.78706 0.686066 3.12922 1.90733 1.90769Z"
                }
            ],
            name: "Notes & Attachments",
            viewBox: "0 0 26 27",
            isSelected : false,
            isDisabled : false
        },
        {
            paths :[
                {
                    fill:"black",
                    path:"M25.734 5.93644L19.6874 0.250166C19.5175 0.0901624 19.287 0.000168561 19.0465 -3.05176e-05H6.95349C6.39222 -3.05176e-05 5.85393 0.20965 5.45705 0.582885C5.06017 0.956119 4.83721 1.46233 4.83721 1.99017V4.54899H2.11628C1.55501 4.54899 1.01672 4.75867 0.619844 5.1319C0.222965 5.50514 0 6.01135 0 6.53919V27.0098C0 27.5376 0.222965 28.0438 0.619844 28.4171C1.01672 28.7903 1.55501 29 2.11628 29H19.0465C19.6078 29 20.1461 28.7903 20.5429 28.4171C20.9398 28.0438 21.1628 27.5376 21.1628 27.0098V24.451H23.8837C24.445 24.451 24.9833 24.2413 25.3802 23.868C25.777 23.4948 26 22.9886 26 22.4608V6.53919C25.9998 6.31305 25.9041 6.09624 25.734 5.93644ZM19.3488 27.0098C19.3488 27.0852 19.317 27.1575 19.2603 27.2108C19.2036 27.2641 19.1267 27.2941 19.0465 27.2941H2.11628C2.0361 27.2941 1.9592 27.2641 1.9025 27.2108C1.84581 27.1575 1.81395 27.0852 1.81395 27.0098V6.53919C1.81395 6.46378 1.84581 6.39146 1.9025 6.33815C1.9592 6.28483 2.0361 6.25487 2.11628 6.25487H13.8329L19.3488 11.4422V27.0098ZM24.186 22.4608C24.186 22.5362 24.1542 22.6085 24.0975 22.6618C24.0408 22.7151 23.9639 22.7451 23.8837 22.7451H21.1628V11.0882C21.1626 10.8621 21.0669 10.6453 20.8967 10.4855L14.8502 4.79919C14.6803 4.63918 14.4498 4.54919 14.2093 4.54899H6.65116V1.99017C6.65116 1.91476 6.68301 1.84244 6.73971 1.78913C6.79641 1.73581 6.87331 1.70585 6.95349 1.70585H18.6701L24.186 6.89316V22.4608ZM15.1163 17.9117C15.1163 18.1379 15.0207 18.3549 14.8506 18.5149C14.6805 18.6748 14.4498 18.7647 14.2093 18.7647H6.95349C6.71294 18.7647 6.48225 18.6748 6.31216 18.5149C6.14207 18.3549 6.04651 18.1379 6.04651 17.9117C6.04651 17.6855 6.14207 17.4686 6.31216 17.3086C6.48225 17.1487 6.71294 17.0588 6.95349 17.0588H14.2093C14.4498 17.0588 14.6805 17.1487 14.8506 17.3086C15.0207 17.4686 15.1163 17.6855 15.1163 17.9117ZM15.1163 22.4608C15.1163 22.687 15.0207 22.9039 14.8506 23.0639C14.6805 23.2238 14.4498 23.3137 14.2093 23.3137H6.95349C6.71294 23.3137 6.48225 23.2238 6.31216 23.0639C6.14207 22.9039 6.04651 22.687 6.04651 22.4608C6.04651 22.2345 6.14207 22.0176 6.31216 21.8576C6.48225 21.6977 6.71294 21.6078 6.95349 21.6078H14.2093C14.4498 21.6078 14.6805 21.6977 14.8506 21.8576C15.0207 22.0176 15.1163 22.2345 15.1163 22.4608Z"
                }
            ],
            name: "Files",
            viewBox: "0 0 24 29",
            isSelected : false
        },
        {
            paths :[
                {
                    stroke:"black",
                    path:"M9.86207 22.8036H9.61928L9.46914 22.9944L5.87931 27.5561V23.3036V22.8036H5.37931H2.20955C1.33078 22.8036 0.5 21.9547 0.5 20.7511V9.80304C0.5 8.59882 1.33084 7.75 2.20955 7.75H19.3072C20.1865 7.75 21.0172 8.59896 21.0172 9.80252V20.7505C21.0172 21.9548 20.1864 22.8036 19.3077 22.8036H9.86207Z"
                },
                {
                    stroke:"black",
                    path:"M6.69234 0.5H23.7905C24.6692 0.5 25.5 1.34882 25.5 2.55304V13.5005C25.5 14.7048 24.6692 15.5536 23.7905 15.5536H22.0173V9.80304C22.0173 8.187 20.8694 6.75 19.3077 6.75H4.98279V2.55304C4.98279 1.34882 5.81363 0.5 6.69234 0.5Z",
                },
                {
                    fill:"black",
                    path:"M11.2068 12.954H4.93094C4.68305 12.954 4.48267 12.722 4.48267 12.4362C4.48267 12.1503 4.68305 11.9183 4.93094 11.9183H11.2068C11.4547 11.9183 11.6551 12.1503 11.6551 12.4362C11.6551 12.722 11.4547 12.954 11.2068 12.954Z"
                },
                {
                    fill:"black",
                    path:"M17.0344 16.0612H4.93094C4.68305 16.0612 4.48267 15.8292 4.48267 15.5433C4.48267 15.2575 4.68305 15.0255 4.93094 15.0255H17.0344C17.2823 15.0255 17.4827 15.2575 17.4827 15.5433C17.4827 15.8292 17.2823 16.0612 17.0344 16.0612Z"
                },
                {
                    fill:"black",
                    path:"M17.0344 19.1688H4.93094C4.68305 19.1688 4.48267 18.9368 4.48267 18.6509C4.48267 18.3651 4.68305 18.1331 4.93094 18.1331H17.0344C17.2823 18.1331 17.4827 18.3651 17.4827 18.6509C17.4827 18.9368 17.2823 19.1688 17.0344 19.1688Z" 
                }
            ],
            name: "Chatter",
            viewBox: "0 0 27 29",
            isSelected : false
        },
        {
            paths :[
                {
                    stroke:"black", 
                    path:"M26.9998 22.75V10.0625L17.7141 1H8.4284C7.44331 1 6.49856 1.38192 5.802 2.06174C5.10544 2.74156 4.71411 3.66359 4.71411 4.625V22.75C4.71411 23.7114 5.10544 24.6334 5.802 25.3133C6.49856 25.9931 7.44331 26.375 8.4284 26.375H23.2855C24.2706 26.375 25.2154 25.9931 25.9119 25.3133C26.6085 24.6334 26.9998 23.7114 26.9998 22.75Z M1 4.625V22.75C1 24.6728 1.78265 26.5169 3.17578 27.8765C4.56891 29.2362 6.45839 30 8.42857 30H23.2857M17.7143 1V6.4375C17.7143 7.39891 18.1056 8.32094 18.8022 9.00076C19.4987 9.68058 20.4435 10.0625 21.4286 10.0625H27"
                },
            ],
            name: "Documents",
            viewBox: "0 0 28 31",
            isSelected : false
        },
    ];
    @track externalStorageOptions = [
        {
            paths :[{fill:"black", path:"M28.9911 16.3794C28.9881 16.3294 28.9747 16.2838 28.9613 16.2353C28.9479 16.1868 28.936 16.1412 28.9151 16.0971C28.9077 16.0824 28.9077 16.0676 28.9002 16.0544L19.7306 0.367647C19.6653 0.255871 19.5713 0.163051 19.4581 0.0985153C19.345 0.0339799 19.2166 3.27884e-06 19.0859 0H9.91331C9.78312 0.000263272 9.65528 0.034236 9.54253 0.0985293C9.4418 0.159014 9.35747 0.242796 9.29684 0.342647C9.28939 0.352941 9.27748 0.357353 9.27004 0.367647L0.100444 16.0544C0.0346575 16.166 0 16.2929 0 16.4221C0 16.5512 0.0346575 16.6781 0.100444 16.7897L4.68673 24.6324C4.69715 24.6515 4.71949 24.6588 4.7314 24.6765C4.78079 24.7473 4.84286 24.8086 4.91456 24.8574C4.94285 24.8765 4.96518 24.8956 4.99496 24.9103C5.09771 24.9632 5.2079 24.9985 5.33149 25H23.6722C23.8029 25 23.9312 24.966 24.0444 24.9015C24.1576 24.837 24.2516 24.7441 24.3169 24.6324L28.9017 16.7897C28.9121 16.7721 28.9092 16.7485 28.9166 16.7309C28.9546 16.6524 28.9779 16.5676 28.9851 16.4809C28.9866 16.4618 29 16.4441 29 16.4221C29 16.4074 28.994 16.3941 28.9926 16.3779M18.6541 1.47059L26.9645 15.6868H19.5177L11.2043 1.47059H18.6541ZM17.7949 15.6868H11.2028L14.4996 10.0471L17.7949 15.6868ZM1.60141 16.4221L9.91331 2.20588L13.6389 8.57794L5.33 22.7941L1.60141 16.4221ZM23.2403 23.5294H6.61952L10.3451 17.1574H26.966L23.2403 23.5294Z"}],
            name:"Google Drive",
            viewBox: "0 0 29 25",
            isSelected : false,
            isDisabled: null,
        },
        {
            paths: [{fill:"black", path:"M9.02569 6.89465C9.02569 7.29181 9.0577 7.60953 9.13771 7.8796C9.21772 8.07023 9.32974 8.32441 9.47377 8.61037C9.53778 8.67391 9.55378 8.76923 9.55378 8.84866C9.55378 8.95987 9.48977 9.05518 9.34575 9.16639L8.67364 9.6112C8.57763 9.67475 8.48161 9.70652 8.4016 9.70652C8.28958 9.70652 8.19357 9.64298 8.08155 9.54766C7.93753 9.3888 7.80951 9.22993 7.69749 9.05518C7.60147 8.88043 7.48946 8.67391 7.37744 8.43562C6.54531 9.40468 5.50515 9.89716 4.24095 9.89716C3.34481 9.89716 2.6407 9.64298 2.11262 9.13461C1.60054 8.62625 1.3285 7.94314 1.3285 7.08528C1.3285 6.21154 1.64855 5.49666 2.28865 4.92475C2.94475 4.38462 3.80888 4.09866 4.89705 4.09866C5.26511 4.09866 5.60116 4.13044 6.03323 4.19398C6.40129 4.24164 6.83335 4.32107 7.24942 4.41639V3.65385C7.24942 2.84365 7.08939 2.3194 6.75334 1.95401C6.40129 1.6204 5.8412 1.47742 5.02507 1.47742C4.64101 1.47742 4.25695 1.52508 3.87289 1.60452C3.47283 1.69983 3.08877 1.81104 2.72071 1.9699C2.54469 2.03345 2.40066 2.0811 2.35266 2.09699C2.27264 2.12876 2.22464 2.12876 2.17663 2.12876C2.03261 2.12876 1.95259 2.03344 1.95259 1.81104V1.28679C1.95259 1.12793 1.9686 1.00084 2.03261 0.921405C2.08061 0.841973 2.17663 0.778428 2.32065 0.730769C2.70471 0.508361 3.13678 0.349498 3.66486 0.222408C4.20809 0.0814015 4.76764 0.0119656 5.32912 0.0158867C6.59332 0.0158867 7.52146 0.30184 8.11355 0.873746C8.70565 1.44565 8.99369 2.3194 8.99369 3.4791V6.89465H9.02569ZM4.70502 8.51505C5.05708 8.51505 5.40913 8.4515 5.79319 8.32441C6.17725 8.19732 6.5133 7.95903 6.80135 7.6413C6.97738 7.43478 7.1054 7.21237 7.20141 6.95819C7.20141 6.70401 7.28142 6.40217 7.28142 6.03679V5.60786C6.96137 5.49665 6.64132 5.49666 6.28927 5.41722C5.95966 5.38148 5.62862 5.36027 5.29711 5.35368C4.577 5.35368 4.06492 5.49666 3.71287 5.78261C3.36081 6.06856 3.20079 6.46572 3.20079 6.98997C3.20079 7.49833 3.31281 7.8796 3.58485 8.11789C3.84089 8.38796 4.20895 8.51505 4.70502 8.51505ZM13.2504 9.64298C13.0954 9.64757 12.9417 9.61487 12.8023 9.54766C12.7543 9.46823 12.6743 9.32525 12.6103 9.13461L10.1139 0.969064C10.0499 0.730769 10.0178 0.619565 10.0178 0.540134C10.0178 0.365385 10.0979 0.270067 10.2739 0.270067H11.3141C11.5221 0.270067 11.6661 0.30184 11.7301 0.381271C11.8261 0.444816 11.8901 0.587793 11.9542 0.794314L13.7304 7.78428L15.3947 0.794314C15.4427 0.587793 15.5067 0.444816 15.6027 0.381271C15.6827 0.317726 15.8268 0.270067 16.0028 0.270067H16.8829C17.0749 0.270067 17.219 0.30184 17.299 0.381271C17.379 0.444816 17.459 0.587793 17.507 0.794314L19.2033 7.8796L21.0276 0.794314C21.0916 0.587793 21.1716 0.444816 21.2356 0.381271C21.3316 0.317726 21.4596 0.270067 21.6517 0.270067H22.6438C22.8198 0.270067 22.9159 0.365385 22.9159 0.540134C22.9159 0.587793 22.8999 0.651338 22.8839 0.730769C22.8839 0.730769 22.8518 0.85786 22.8198 0.969064L20.2434 9.13461C20.1794 9.35702 20.1154 9.46823 20.0034 9.54766C19.9394 9.6112 19.7954 9.65886 19.6193 9.65886H18.7072C18.4992 9.65886 18.4032 9.62709 18.2751 9.54766C18.1675 9.43441 18.1001 9.28938 18.0831 9.13461L16.4348 2.3194L14.7866 9.11873C14.7386 9.32525 14.6746 9.46823 14.5946 9.54766C14.4624 9.61913 14.3127 9.65217 14.1625 9.64298H13.2504ZM26.9325 9.92893C26.4044 9.92893 25.8123 9.86539 25.2842 9.73829C24.7561 9.6112 24.3401 9.46823 24.068 9.32525C23.9291 9.25889 23.8124 9.15407 23.732 9.02341C23.6885 8.93434 23.6666 8.83642 23.668 8.73746V8.19732C23.668 7.97492 23.748 7.8796 23.908 7.8796H24.1C24.1641 7.8796 24.2601 7.95903 24.3721 8.00669C24.7241 8.16555 25.1242 8.29264 25.5403 8.37207C25.9723 8.45151 26.4044 8.49916 26.8045 8.49916C27.4766 8.49916 28.0047 8.38796 28.3567 8.14967C28.7248 7.8796 28.9168 7.57776 28.9168 7.14883C28.9168 6.84699 28.8048 6.6087 28.6287 6.40217C28.4367 6.21154 28.0687 6.0209 27.5566 5.86204L26.0043 5.38545C25.2362 5.13127 24.6601 4.78177 24.3081 4.30518C23.9645 3.86402 23.7787 3.32184 23.78 2.76421C23.78 2.3194 23.876 1.93813 24.068 1.60452C24.2601 1.25502 24.5161 0.969064 24.8042 0.730769C25.1562 0.492475 25.5083 0.317726 25.9403 0.190635C26.3564 0.063545 26.8045 0 27.2845 0C27.5086 0 27.7486 0.0158866 28.0047 0.0476592C28.2287 0.0794318 28.4527 0.12709 28.6768 0.158863C28.9008 0.222408 29.0928 0.270067 29.2848 0.333612C29.4769 0.397157 29.6049 0.460702 29.7329 0.524247C29.8769 0.603679 29.989 0.683111 30.053 0.778428C30.117 0.873746 30.149 0.98495 30.149 1.12793V1.63629C30.149 1.8587 30.069 1.9699 29.9089 1.9699C29.8289 1.9699 29.6849 1.92224 29.4929 1.84281C28.9008 1.57274 28.2127 1.42977 27.4606 1.42977C26.8525 1.42977 26.4044 1.52508 26.0363 1.73161C25.7163 1.92224 25.5403 2.23997 25.5403 2.6689C25.5403 2.97074 25.6523 3.22492 25.8603 3.41555C26.0683 3.62207 26.4684 3.81271 27.0285 4.00335L28.5487 4.47993C29.3169 4.70234 29.8609 5.05184 30.197 5.49666C30.517 5.92559 30.6771 6.41806 30.6771 6.97408C30.6771 7.4189 30.5811 7.83194 30.405 8.19732C30.213 8.54682 29.957 8.86455 29.6049 9.11873C29.3009 9.3888 28.9008 9.57943 28.4527 9.72241C28.0047 9.86539 27.4606 9.92893 26.9325 9.92893ZM28.9328 15.0761C25.4282 17.6338 20.3395 19 16.0028 19C9.84182 19 4.32096 16.7441 0.144312 13.0109C-0.19174 12.709 0.112307 12.3119 0.512369 12.5502C5.02507 15.1396 10.5779 16.7124 16.3388 16.7124C20.2274 16.7124 24.5001 15.9181 28.4207 14.2341C29.0128 13.9958 29.5089 14.6472 28.9328 15.0761ZM30.405 13.4398C29.941 12.852 27.4286 13.1538 26.2924 13.2809C25.9563 13.3286 25.9083 13.0268 26.2124 12.8043C28.2127 11.4222 31.5092 11.8512 31.8773 12.2801C32.2613 12.7567 31.7812 16.0293 29.9089 17.5861C29.6049 17.8244 29.3329 17.6973 29.4609 17.4114C29.8929 16.3311 30.8371 13.9799 30.405 13.4398Z"}],
            name: "AWS",
            viewBox: "0 0 32 19",
            isSelected : false,
            isDisabled: null,
        },
        {
            paths: [{fill:"black", path:"M25.936 7.69891C26.7787 7.75351 27.5733 7.96646 28.32 8.33775C29.056 8.68721 29.696 9.17317 30.24 9.79563C30.784 10.3963 31.216 11.0842 31.536 11.8596C31.8453 12.6349 32 13.4594 32 14.3331C32 15.2504 31.8293 16.1131 31.488 16.9212C31.1467 17.7293 30.6773 18.4337 30.08 19.0343C29.4933 19.6349 28.8 20.11 28 20.4594C27.232 20.8198 26.4 21 25.504 21H8C6.90133 21 5.86667 20.7761 4.896 20.3284C3.92533 19.9025 3.07733 19.3237 2.352 18.592C1.62667 17.8495 1.056 16.9813 0.64 15.9875C0.213333 14.9938 0 13.9345 0 12.8097C0 11.9142 0.138667 11.0515 0.416 10.2215C0.672 9.4025 1.06667 8.64899 1.6 7.961C2.06933 7.27301 2.64533 6.67239 3.328 6.15913C4.01067 5.64587 4.768 5.25273 5.6 4.97972C5.99467 4.83775 6.37333 4.76677 6.736 4.76677C7.10933 4.69033 7.49333 4.64119 7.888 4.61934H7.904C8.36267 3.8986 8.90133 3.25429 9.52 2.68643C10.1067 2.11856 10.7733 1.63261 11.52 1.22855C12.2347 0.857254 12.992 0.551482 13.792 0.311233C14.592 0.103744 15.4133 0 16.256 0C17.3867 0 18.4747 0.191107 19.52 0.573323C20.5653 0.955538 21.5253 1.48518 22.4 2.16225C23.2533 2.83931 23.984 3.64743 24.592 4.58658C25.2107 5.53666 25.6587 6.5741 25.936 7.69891ZM16.256 2.04758C15.072 2.04758 13.952 2.29875 12.896 2.80109C11.8293 3.29251 10.9227 4.00234 10.176 4.93058C10.5707 5.03978 10.9493 5.17629 11.312 5.34009C11.664 5.5039 12.016 5.69501 12.368 5.91342L18.736 9.81201L22.4 8.23947C22.624 8.14119 22.8587 8.04836 23.104 7.961C23.3493 7.88455 23.6053 7.81903 23.872 7.76443C23.616 6.91264 23.2373 6.13729 22.736 5.43838C22.2347 4.73947 21.648 4.13885 20.976 3.63651C20.3253 3.13417 19.5893 2.74649 18.768 2.47348C17.9893 2.18955 17.152 2.04758 16.256 2.04758ZM3.2 16.4953L16.432 10.7949L11.328 7.64977C10.8053 7.33307 10.2613 7.08736 9.696 6.91264C9.09867 6.74883 8.50667 6.66693 7.92 6.66693C7.10933 6.66693 6.336 6.83073 5.6 7.15835C4.896 7.48596 4.27733 7.92824 3.744 8.48518C3.21067 9.05304 2.784 9.70827 2.464 10.4509C2.15467 11.1934 2 11.9797 2 12.8097C2 13.454 2.10667 14.0983 2.32 14.7426C2.52267 15.3978 2.816 15.9821 3.2 16.4953ZM25.504 18.9524C26.0053 18.9524 26.4853 18.8651 26.944 18.6903C27.4027 18.5374 27.8293 18.3081 28.224 18.0023L18.576 12.1381L4.848 18.0187C5.31733 18.3136 5.81867 18.5374 6.352 18.6903C6.88533 18.8651 7.43467 18.9524 8 18.9524M29.52 16.4134C29.84 15.7473 30 15.0538 30 14.3331C30 13.6342 29.8667 12.9953 29.6 12.4165C29.344 11.8487 28.9973 11.3627 28.56 10.9587C28.112 10.5546 27.5947 10.2434 27.008 10.025C26.4107 9.79563 25.7813 9.68097 25.12 9.68097C24.7467 9.68097 24.3733 9.73557 24 9.84477C23.6373 9.93214 23.28 10.0468 22.928 10.1888C22.576 10.3198 22.224 10.4672 21.872 10.631C21.5307 10.7949 21.1947 10.9532 20.864 11.1061L29.52 16.4134Z"}],
            name: "One Drive",
            viewBox: "0 0 32 21",
            isSelected : false,
            isDisabled: null,
        },
        {
            paths: [{fill:"black", path:"M27.6716 15.273L21.9596 11.0647L27.6716 6.85644C27.773 6.78163 27.8558 6.68181 27.9129 6.56553C27.9701 6.44924 28 6.31994 28 6.1887C28 6.05745 27.9701 5.92815 27.9129 5.81186C27.8558 5.69558 27.773 5.59576 27.6716 5.52095L21.0534 0.644944C20.9256 0.550571 20.7737 0.5 20.6182 0.5C20.4626 0.5 20.3107 0.550571 20.1829 0.644944L14 5.19995L7.8171 0.644944C7.68927 0.550571 7.53741 0.5 7.38183 0.5C7.22625 0.5 7.07439 0.550571 6.94656 0.644944L0.328387 5.52095C0.227051 5.59576 0.144248 5.69558 0.0870595 5.81186C0.0298714 5.92815 0 6.05745 0 6.1887C0 6.31994 0.0298714 6.44924 0.0870595 6.56553C0.144248 6.68181 0.227051 6.78163 0.328387 6.85644L6.04038 11.0647L0.328387 15.273C0.227051 15.3478 0.144248 15.4476 0.0870595 15.5639C0.0298714 15.6802 0 15.8095 0 15.9407C0 16.072 0.0298714 16.2013 0.0870595 16.3175C0.144248 16.4338 0.227051 16.5336 0.328387 16.6085L6.94656 21.4845C7.07439 21.5788 7.22625 21.6294 7.38183 21.6294C7.53741 21.6294 7.68927 21.5788 7.8171 21.4845L14 16.9295L20.1829 21.4845C20.3107 21.5788 20.4626 21.6294 20.6182 21.6294C20.7737 21.6294 20.9256 21.5788 21.0534 21.4845L27.6716 16.6085C27.773 16.5336 27.8558 16.4338 27.9129 16.3175C27.9701 16.2013 28 16.072 28 15.9407C28 15.8095 27.9701 15.6802 27.9129 15.5639C27.8558 15.4476 27.773 15.3478 27.6716 15.273ZM14 14.952L8.72328 11.0647L14 7.17744L19.2767 11.0647L14 14.952ZM20.6182 2.30143L25.8949 6.1887L20.6182 10.076L15.3415 6.1887L20.6182 2.30143ZM7.38183 2.30143L12.6585 6.1887L7.38183 10.076L2.10511 6.1887L7.38183 2.30143ZM7.38183 19.828L2.10511 15.9407L7.38183 12.0535L12.6585 15.9407L7.38183 19.828ZM20.6182 19.828L15.3415 15.9407L20.6182 12.0535L25.8949 15.9407L20.6182 19.828ZM17.668 22.9838C17.7252 23.0715 17.7655 23.1703 17.7868 23.2746C17.8081 23.3789 17.8099 23.4867 17.792 23.5917C17.7742 23.6967 17.7371 23.797 17.6828 23.8867C17.6285 23.9765 17.5582 24.054 17.4758 24.1148L14.4353 26.3551C14.3074 26.4494 14.1556 26.5 14 26.5C13.8444 26.5 13.6926 26.4494 13.5647 26.3551L10.5242 24.1148C10.3645 23.9893 10.257 23.8025 10.2245 23.5941C10.192 23.3857 10.237 23.172 10.3501 22.9983C10.4631 22.8246 10.6353 22.7046 10.8301 22.6637C11.0248 22.6229 11.2269 22.6643 11.3935 22.7793L14 24.704L16.6065 22.7847C16.7722 22.6618 16.977 22.6137 17.1759 22.651C17.3749 22.6883 17.5518 22.808 17.668 22.9838Z"}],
            name: "Dropbox",
            viewBox: "0 0 28 27",
            isSelected : false,
            isDisabled: null,
        }
    ];
    @track outputChannels = [
        {
            paths:[
                {
                    fill:"black",
                    path:"M64 112c-8.8 0-16 7.2-16 16v22.1L220.5 291.7c20.7 17 50.4 17 71.1 0L464 150.1V128c0-8.8-7.2-16-16-16H64zM48 212.2V384c0 8.8 7.2 16 16 16H448c8.8 0 16-7.2 16-16V212.2L322 328.8c-38.4 31.5-93.7 31.5-132 0L48 212.2zM0 128C0 92.7 28.7 64 64 64H448c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128z"
                }
            ],
            name: "Email",
            viewBox: "0 0 512 512",
            isSelected : false
        },
        {
            paths:[
                {
                    fill:"black",
                    path:"M13 12H16L12 16L8 12H11V8H13V12ZM15 4H5V20H19V8H15V4ZM3 2.9918C3 2.44405 3.44749 2 3.9985 2H16L20.9997 7L21 20.9925C21 21.5489 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5447 3 21.0082V2.9918Z"
                }
            ],
            name:"Download",
            viewBox: "0 0 24 24",
            isSelected : false
        }
    ];

    @track allEmailTemplates = [];
    @track emailTemplatesToShow = [];
    @track selectedEmailTemplate;
    @track viewAsTypeOptions = [{
            label: "View as Plain Text",
            value: "plain"
        },{
            label: "View as Rich Text",
            value: "rich"
        }];
    @track selectedViewAsType = "rich";
    @track isPlainEmailBody = false;


    //CSV
    @track showCSVPreview = false;
    @track fetchedResults = [];
    @track generatedCSVData;
    @track isAdditionalInfo = false;
    sessionId;

    @track isCSVOnly = false;
    @track isAllExceptCSV = false;

    //PDF - DOC
    @track showSimplePreview = false;
    @track generatePDF = false;
    @track vfGeneratePageSRC;

    //Google doc
    @track showGDocPreview = false;
    @track googleDocData;

    // Simple template docGenerate...
    completedSimTempPros = 0;
    simpleTemplate = false;

    //All files use
    @track showFolderSelection = false;
    @track fileName;
    @track allFolders = [];
    @track selectedFolder;

    //Results
    @track succeeded = [];
    @track failed = {};
    resultPromises = [];
    // @track resultList = [];

    //Default Generation
    @track isDefaultGenerate = false;

    @track isClosableError = false;

    @track isNotGoogleNotGenerable = false;
    @track activity = {
        Id : null,
        DocGenius_Template__c : null,
        Selected_Channels__c : null,
        File_Name__c : null,
        Download__c : null,
        Email__c : null,
        Google_Drive__c : null,
        AWS__c : null,
        One_Drive__c : null,
        Dropbox__c : null,
        Notes_Attachments__c : null,
        Files__c : null,
        Chatter__c : null,
        Documents__c : null,
    }

    get showCloseButton(){
        return this.isCSVOnly || this.isDefaultGenerate || this.isCalledFromPreview;
    }

    get openedTabName(){
        if(this.showCSVPreview){
            return 'CSV Preview';
        }else if(this.showSimplePreview){
            return this.templateType + ' Preview';
        }
        return 'Generate Document';
    }

    get documentTypesToShow(){
        if(this.selectedTemplate || this.isCalledFromDefaults){
            return this.templateType === 'CSV Template' || (this.isCalledFromDefaults && this.templateTypeFromParent==='CSV Template') ? this.csvDocumentTypes : this.generalDocumentTypes;
        }
        this.csvDocumentTypes.forEach(option => {option.isSelected = false});
        this.generalDocumentTypes.forEach(option => {option.isSelected = false});
        return this.documentTypes;
    }

    get isOtherModelOpen(){
        return this.showAllTemplates || this.showCSVPreview || this.showGDocPreview || this.showSimplePreview || this.isCalledFromDefaults;
    }

    get hideOptionSelection(){
        return this.showAllTemplates || this.showCSVPreview || this.isEditDisabled || this.showGDocPreview || this.showSimplePreview;
    }

    get showBottomButtons(){
        return !this.showAllTemplates && this.isOtherModelOpen && !this.isCalledFromDefaults;
    }

    get showNoTemplateSelected(){
        return this.isEditDisabled && !this.isOtherModelOpen && !this.isCalledFromDefaults;
    }

    get filterForActiveTemplates(){
        let filters = [
            {field : 'MVDG__Object_API_Name__c', operator : 'eq', value : this.internalObjectApiName},
            {field : 'MVDG__Template_Status__c', operator : 'eq', value : true}
        ];
        if(this.isCSVOnly){
            filters.push({field : 'MVDG__Template_Type__c', operator : 'eq', value : 'CSV Template'});
        }
        if(this.isAllExceptCSV){
            filters.push({field : 'MVDG__Template_Type__c', operator : 'ne', value : 'CSV Template'});
        }
        if(this.isNotGoogleNotGenerable){
            filters.push({field : 'MVDG__Template_Type__c', operator : 'ne', value : 'Google Doc Template'});
        }
        return filters;
    }

    get updatedTemplates(){
        let searchedTemplates = this.allTemplates.filter(t => t.MVDG__Template_Name__c.toUpperCase().includes(this.templateSearchKey.toUpperCase()));
        this.noTemplateFound = searchedTemplates.length < 1 ? true : false;
        if(!this.templateSearchKey){
            return this.allTemplates;
        }
        return searchedTemplates;
    }

    get isEditDisabled(){
        return this.selectedTemplate || this.isCalledFromDefaults ? false : true;
    }

    get templateType(){
        return !this.isCalledFromDefaults ? this.allTemplates.find(t => t.Id === this.selectedTemplate)?.MVDG__Template_Type__c || 'CSV Template' : this.templateTypeFromParent;
    }

    get templateName(){
        return this.allTemplates.find(t => t.Id === this.selectedTemplate)?.MVDG__Template_Name__c || '';
    }

    get isCSVTemplate(){
        return this.templateType==='CSV Template' ? true : false;
    }

    get selectedExtension(){
        return this.documentTypes.find(dt => dt.isSelected === true)?.extension;
    }

    get selectedChannels(){
        let channels = [];
        this.internalStorageOptions.forEach(o=>{
            o.isSelected ? channels.push(o.name): undefined;
        })
        this.externalStorageOptions.forEach(o=>{
            o.isSelected ? channels.push(o.name): undefined;
        })
        this.outputChannels.forEach(o=>{
            o.isSelected ? channels.push(o.name): undefined;
        })

        return channels;
    }

    @wire(CurrentPageReference)
    currentPageReference;

    connectedCallback() {
        this.showSpinner = true;
        try{
            window?.addEventListener('message', this.simpleTempFileGenResponse);
            this.hideHeader = this.calledFromWhere === 'defaults';
            let isAutoGeneration = this.currentPageReference.type !== "standard__quickAction" && this.calledFromWhere!="preview" && this.calledFromWhere!="defaults";
            if(isAutoGeneration){
                this.internalObjectApiName = this.currentPageReference?.state?.c__objectApiName;
                this.isCSVOnly = this.currentPageReference?.state?.c__isCSVOnly === 'true' ? true : false;
                this.isDefaultGenerate = this.currentPageReference?.state?.c__isDefaultGenerate === 'true' ? true : false;
                this.template.host.classList.add('pou-up-view');
                this.selectedTemplate = this.currentPageReference?.state?.c__templateIdToGenerate;
            }
            Promise.resolve(this.internalObjectApiName)
            .then(() => {
                return Promise.all([
                    this.fetchCombinedData(),
                ]);
            })
            .then(() => {
                if (this.calledFromWhere === "preview") {
                    this.handleCalledFromPreview();
                } else if (this.calledFromWhere === 'defaults') {
                    this.handleCalledFromDefaults();
                } else if(this.isCSVOnly){
                    this.handleEmailTemplateSelect({detail:[]});
                    this.showSpinner = false;
                } else if (isAutoGeneration) {
                    this.handleAutoGeneration();
                } else if(this.currentPageReference.type === "standard__quickAction" && this.currentPageReference?.attributes?.apiName?.split('.')[1] !== 'DG_Generate_Document'){
                    let templateToAutoGenerate = this.allTemplates.find(item => item.MVDG__Button_Api_Name__c === this.currentPageReference?.attributes?.apiName?.split('.')[1]);
                    if(templateToAutoGenerate){
                        this.selectedTemplate = templateToAutoGenerate.Id;
                        this.handleAutoGeneration();
                    }else{
                        this.showWarningPopup('error', 'Something went wrong!', 'The Template Couldn\'t be found or does not exist!');
                        this.isClosableError = true;
                    }
                } else if(this.currentPageReference.type === "standard__quickAction" && this.currentPageReference?.attributes?.apiName?.split('.')[1] === 'DG_Generate_Document'){
                    this.handleEmailTemplateSelect({detail:[]});
                    this.isAllExceptCSV = true;
                    this.allTemplates = this.allTemplates.filter(item => item.MVDG__Template_Type__c !== 'CSV Template');
                    this.showSpinner = false;
                }
            })
            .catch(e => {
                this.showSpinner = false;
                errorDebugger('generateDocument', 'connectedCallback > promise', e, 'error');
            });
        }catch(e){
            this.showSpinner = false;
            errorDebugger('generateDocument', 'connectedCallback', e, 'error');
        }
    }

    disconnectedCallback(){
        window?.removeEventListener('message', this.simpleTempFileGenResponse);
    }

    renderedCallback() {
        try{
            if(this.isInitialStyleLoaded) return;
            const STYLE = document.createElement('style');
            STYLE.innerText = `

                :host{
                    --border-color-of-email-body: darkgray;
                }

                .slds-modal__container{
                    padding:0;
                }
                .slds-modal__content{
                    border-radius: 0.5rem !important;
                }
                .modal-container.slds-modal__container {
                    width: 100%;
                    max-width: 100%;
                }

                .modal-container {
                    width: 100%;
                    padding: 0 15%;
                    min-width : unset;
                    max-width : unset;
                }
                .body-div .fix-slds-input_faux {
                    height: unset !important;
                }
                    
                .body-div button.slds-button.slds-color-picker__summary-button.slds-button_icon.slds-button_icon-more {
                    border: 1px solid darkgray;
                }

                .body-div .slds-rich-text-editor__textarea:last-child .slds-rich-text-area__content {
                    resize: auto;
                    max-height: fit-content;
                    border-radius : 0.5rem;
                }
                    
                .body-div .slds-textarea {
                    min-height: 10rem;
                    height: 10rem;
                    border-radius: 0.5rem;
                    border: 1px solid darkgray;
                    box-shadow: none;
                }

                .body-div .slds-textarea:focus{
                    border-color: #00aeff;
                }

                .body-div .slds-rich-text-editor{
                    border: 1px solid var(--border-color-of-email-body, darkgray) !important;
                }

                .body-div .slds-rich-text-editor__toolbar.slds-shrink-none {
                    background-color: white;
                }
                .body-div .slds-has-focus{
                    box-shadow:none;
                    --border-color-of-email-body : #00aeff;
                }
                
                .body-div .slds-rich-text-editor__toolbar{
                    border-bottom: 1px solid darkgray;
                }
                
                .body-div :focus-visible{
                    outline : none;
                    box-shadow:none;
                }
    
                .body-div .slds-button_icon-border-filled{
                    border: 1px solid darkgray;
                    border-radius: 0.25rem;
                }
                .body-div .slds-button--icon-border-filled{
                    border: 1px solid darkgray;
                    border-radius: 0.25rem;
                }
                .body-div .slds-button_icon-border{
                    border: 1px solid darkgray;
                    border-radius: 0.25rem;
                }
                .body-div .slds-button--icon-border{
                    border: 1px solid darkgray;
                    border-radius: 0.25rem;
                }
                .body-div .slds-input_faux{
                    border: 1px solid darkgray;
                    border-radius: 0.25rem;
                }


                @media (max-width: 1440px) {
                    .modal-container {
                        width: 100%;
                        padding: 0 10%;
                        min-width : unset;
                        max-width : unset;
                    }
                }
                @media (max-width: 1024px) {
                    .modal-container {
                        width: 100%;
                        padding: 0 5%;
                        min-width : unset;
                        max-width : unset;
                        margin : 0;
                    }
                }
            `;
    
            this.template.querySelector('.main-generate-document-div').appendChild(STYLE);
            this.isInitialStyleLoaded = true;
        }catch (e) {
            errorDebugger('generateDocument', 'renderedCallback', e, 'error');
        }

    }

    handleCalledFromPreview() {
        this.isCalledFromPreview = true;
        this.template.host.classList.add('pou-up-view');
        this.template.querySelector('.template-select-div').style.display = 'none';
        this.handleSelectTemplate({ detail: [{ Id: this.templateIdFromParent }] });
        this.handleEmailTemplateSelect({detail:[null]});
        this.showSpinner = false;
    }
    
    handleCalledFromDefaults() {
        try{
            this.isCalledFromDefaults = true;
            this.handleSelectTemplate({ detail: [{ Id: this.templateIdFromParent }] });
            this.fetchAllButtonNames()
            .then(() => {
                this.handleAutoGeneration();
                this.showSpinner = false;
            })
            .catch(e => {
                this.showSpinner = false;
                errorDebugger('generateDocument', 'handleCalledFromDefaults > fetchAllButtonNames', e, 'error');
            });
        }catch(e){
            this.showSpinner = false;
            errorDebugger('generateDocument', 'handleCalledFromDefaults', e, 'error');
        }
    }

    handleConfirmation(event){
        if(event.detail){
            if(this.isClosableError){
                this.handleClose();
            }
        }
        this.isClosableError = false;
    }

    handleAutoGeneration() {
        this.showSpinner = true;
        try {
            getTemplateDefaultValues({ templateId : this.selectedTemplate})
            .then((data) =>{
                if(data){
                    if(data?.docType){
                        this.documentTypes.forEach(dt => {dt.isSelected = false});
                        this.documentTypes.find(item => item.name === data?.docType).isSelected = true;
                    }
                    this.showEmailSection = data?.oChannel?.includes('Email') ? true : false;
                    this.template.querySelector('.email-create-div').style.display = this.showEmailSection ? 'unset' : 'none';
                    data?.iStorage?.split(', ')?.forEach((option) => {this.internalStorageOptions.find(item => item.name === option).isSelected = true});
                    data?.eStorage?.split(', ')?.forEach((option) => {
                        const storageOption = this.externalStorageOptions.find(item => item.name === option);
                        if (storageOption) storageOption.isSelected = !storageOption.isDisabled;
                    });
                    data?.oChannel?.split(', ')?.forEach((option) => {this.outputChannels.find(item => item.name === option).isSelected = true});
                    if(data?.emailAddresses?.includes('<|DGE|>')){
                        const splitEmails = data?.emailAddresses.split('<|DGE|>');
                        this.toEmails = splitEmails[0] ? splitEmails[0].split(',').map(email => email.trim()) : [];
                        this.ccEmails = splitEmails[1] ? splitEmails[1].split(',').map(email => email.trim()) : [];
                        this.bccEmails = splitEmails[2] ? splitEmails[2].split(',').map(email => email.trim()) : [];
                    }
                    this.emailSubject = data?.emailSubject ? data?.emailSubject : '';
                    this.emailBody = data?.emailBody ? data?.emailBody : '';
                    this.selectedEmailTemplate = data?.emailTemplate ? data?.emailTemplate : null;
                    this.handleEmailTemplateSelect({detail:[this.selectedEmailTemplate]});
                    this.buttonLabel = data?.buttonLabel ? data?.buttonLabel : (this.templateNameFromParent ? this.templateNameFromParent.length > 80 ? this.templateNameFromParent.slice(0, 80) : this.templateNameFromParent : '');
                    this.buttonName = data?.buttonName || null;
                    if(this.buttonName && this.allButtons.includes(this.buttonName)){
                        this.isOldButton = true;
                        this.bottomBtnLabel = 'Update Defaults';
                    }else{
                        this.buttonName = null;
                    }
                    this.fileName = this.templateName;
                    this.showCC = this.ccEmails.length > 0 ? true : false;
                    this.showBCC = this.bccEmails.length > 0 ? true : false;
                    this.isAdditionalInfo = true;
                    this.showSpinner = false;
                    if(!this.isCalledFromDefaults){
                        this.showSpinner = true;
                        this.handleGenerate();
                    }
                }else{
                    this.showWarningPopup('error', 'Something went wrong!', 'The Template Couldn\'t be found or does not exist!');
                    this.isClosableError = true;
                }
            })
            .catch((e) =>{
                errorDebugger('generateDocument', 'getTemplateDefaultValues', e, 'error');
                this.showToast('error', 'Something went Wrong!', e.body.message.includes('Insufficient permissions') ? 'Please check the permissions to access the object...' : 'Couldn\'t get default values, please try again...', 5000);
            })
        } catch (e) {
            this.showSpinner = false;
            errorDebugger('generateDocument', 'handleAutoGeneration', e, 'error');
            this.showToast('error', 'Something went Wrong!', 'Couldn\'t get default values, please try again...', 5000);
        }
    }

    fetchCombinedData(){
        return new Promise((resolve, reject) => {
            try {
                getCombinedData({objName: this.internalObjectApiName})
                .then((data) => {
                    if (data.isSuccess){
                        this.setUpAllTemplates(data.templates);
                        this.setUpIntegrationStatus(data.integrationWrapper);
                        this.setUpAllFolders(data.folderWrapper);
                        this.setUpAllEmailTemplates(data.emailTemplates);
                    } else {
                        this.showWarningPopup('error', 'Something Went Wrong!', 'We couldn\'t fetch the required data, please try again!');
                        this.isClosableError = true;
                    }
                    resolve();
                })
                .catch((e) =>{
                    reject(e);
                    errorDebugger('generateDocument', 'getCombinedData', e, 'error');
                    this.showToast('error', 'Something went wrong!', 'We couldn\'t fetch the required data, try again!', 5000);
                })
            } catch (e) {
                reject(e);
                errorDebugger('generateDocument', 'fetchCombinedData', e, 'error');
            }
        })
    }

    setUpAllTemplates(templates){
        try {
            if(this.isCSVOnly){
                templates = templates.filter(t => t.MVDG__Template_Type__c==='CSV Template');
            }
            this.allTemplates = templates.map((temp, index) => {
                const formattedDate = new Date(temp.LastModifiedDate).toLocaleDateString("en-US");
                return {
                    ...temp,
                    isSelectable : temp.MVDG__Template_Status__c,
                    LastModifiedDate: formattedDate,
                    index: +index + 1
                };
            });
            if(this.templateIdFromParent && !this.allTemplates.find(temp => temp.Id === this.templateIdFromParent)){
                this.showWarningPopup('error', 'Something went wrong!', 'The Template Couldn\'t be found or does not exist!');
                this.isClosableError = true;
                return;
            } 
            this.activeTemplates = this.allTemplates.filter(temp => temp.isSelectable === true);
            this.templateList =  this.activeTemplates.map((template) =>{
                return {
                    label:template.MVDG__Template_Name__c, value:template.Id
                }
            });
        } catch (e) {
            errorDebugger('generateDocument', 'setUpAllTemplates', e, 'error');
        }
    }

    setUpIntegrationStatus(integrations){
        try {
            this.externalStorageOptions.find( o => o.name=== 'Google Drive').isDisabled = !integrations.isGoogleDriveIntegrated;
            this.externalStorageOptions.find( o => o.name=== 'AWS').isDisabled = !integrations.isAWSIntegrated;
            this.externalStorageOptions.find( o => o.name=== 'Dropbox').isDisabled = !integrations.isDropBoxIntegrated;
            this.externalStorageOptions.find( o => o.name=== 'One Drive').isDisabled = !integrations.isOneDriveIntegrated;
            if(!integrations.isUserWideAccessible && !integrations.isGoogleDriveIntegrated){
                this.isNotGoogleNotGenerable = true;
                this.allTemplates = this.allTemplates.map((t)=> {
                    return {
                        ...t,
                        isSelectable: t.MVDG__Template_Type__c === 'Google Doc Template' ? false : t.isSelectable
                    }
                })
            }
        } catch (e) {
            errorDebugger('generateDocument', 'setUpIntegrationStatus', e, 'error');
        }
    }

    setUpAllFolders(folders){
        try {
            this.allFolders = folders;
            this.selectedFolder = this.allFolders[0].value;
        } catch (e) {
            errorDebugger('generateDocument', 'setUpAllFolders', e, 'error');
        }
    }

    setUpAllEmailTemplates(data) {
            try {
                if(data){
                    this.allEmailTemplates = data;
                    this.emailTemplatesToShow = this.allEmailTemplates.map((temp) => {
                        return {
                            label: temp.Name,
                            value : temp.Id
                        }
                    });
                }
            } catch (e) {
                this.showToast('error', 'Something went wrong!', 'We couldn\'t fetch email templates!', 5000);
                errorDebugger('generateDocument', 'setUpAllEmailTemplates', e, 'error');
            }
    }

    fetchAllButtonNames(){
        return new Promise((resolve, reject) =>{
            try{
                getButtonNames({objName : this.internalObjectApiName})
                .then((data) => {
                    this.allButtons = data;
                    resolve();
                })
                .catch((e) =>{
                    reject();
                    this.showToast('error', 'Something went wrong!', 'We couldn\'t fetch buttons on object!', 5000);
                    errorDebugger('generateDocument', 'getButtonNames', e, 'error');
                })
            }catch (e) {
                reject();
                this.showToast('error', 'Something went wrong!', 'We couldn\'t fetch buttons on object!', 5000);
                errorDebugger('generateDocument', 'fetchAllButtonNames', e, 'error');
            }
        })
    }

    handleSelectTemplate(event){
        try{
            this.showSpinner = true;
            let result = event.detail[0]?.Id;
            if(!result){
                this.selectedTemplate = null;
            }else{
                this.selectedTemplate = result;
            }
            this.fileName = this.templateName;
            this.csvDocumentTypes.forEach(dt => {dt.isSelected = false});
            this.generalDocumentTypes.forEach(dt => {dt.isSelected = false});
            if (this.isCSVTemplate) {
                this.csvDocumentTypes[0].isSelected = true;
                this.internalStorageOptions.find(item => item.name === 'Notes & Attachments').isDisabled = true;
            }else{
                this.generalDocumentTypes[0].isSelected = true;
                this.internalStorageOptions.find(item => item.name === 'Notes & Attachments').isDisabled = false;
            }
        }catch(e){
            errorDebugger('generateDocument', 'handleSelectTemplate', e, 'error');
        }finally{
            this.showSpinner = false;
        }
    }

    openViewAllTemplates(){
        this.showAllTemplates = true;
    }

    handleRecordPickerError(event){
        errorDebugger('generateDocument', 'handleRecordPickerError', event, 'error');
    }

    handleFileNameChange(event){
        this.fileName = event.target.value;
    }

    handleAdditionalInfo(event){
        this.isAdditionalInfo = event.target.checked;
    }


    //Navigate to respective template builder
    handleEditClick() {
        try{
            this.showSpinner = true;
            let paramToPass = {
                templateId : this.selectedTemplate,
                objectName : this.internalObjectApiName,
            }
            if(this.templateType === 'Simple Template'){
                this.navigateToComp(navigationComps.simpleTemplateBuilder, paramToPass);
            }else if(this.templateType === 'CSV Template'){
                this.navigateToComp(navigationComps.csvTemplateBuilder, paramToPass);
            }else if(this.templateType === 'Google Doc Template'){
                this.navigateToComp(navigationComps.googleDocTemplateEditor, paramToPass);
            }
        }catch(e){
            errorDebugger('generateDocument', 'handleEditClick', e, 'error');
        }finally{
            this.showSpinner = false;
        }
    }
    //Email Section
    toggleCC(){
        try {
            this.showSpinner = true;
            this.showCC = !this.showCC;
        }catch (e) {
            errorDebugger('generateDocument', 'toggleCC', e, 'error');
        }finally{
            this.showSpinner = false;
        }
    }
    toggleBCC(){
        try {
            this.showSpinner = true;
            this.showBCC = !this.showBCC;
        }catch (e) {
            errorDebugger('generateDocument', 'toggleBCC', e, 'error');
        }finally{
            this.showSpinner = false;
        }
    }

    handleToEmailChange(event){
        try {
            let emailString = event.target.value?.trim();
            let enteredChar = event.key;
            let typeOfEmail = event.target.dataset.type;
            if(enteredChar === ',' || enteredChar === 'Enter' || enteredChar === ' ' || enteredChar === 'Tab'  || !enteredChar){
                const emailValidator = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
                emailString.toLowerCase().replaceAll(' ', ',').split(',').forEach((email)=>{
                    if(email){
                        if(emailValidator.test(email)){
                            email = email.trim();
                            let errorClass = '';
                            event.target.value = null;
                            if(typeOfEmail === "to"){
                                this.isToError=false;
                                !this.toEmails.includes(email) ? this.toEmails.push(email) : undefined;
                                errorClass = ".to-error-div";
                            }
                            if(typeOfEmail === "cc"){
                                this.isCcError=false;
                                !this.ccEmails.includes(email) ? this.ccEmails.push(email) : undefined;
                                errorClass = ".cc-error-div";
                            }
                            if(typeOfEmail === "bcc"){
                                this.isBccError=false;
                                !this.bccEmails.includes(email) ? this.bccEmails.push(email) : undefined;
                                errorClass = ".bcc-error-div";
                            }
                            
                            errorClass ? this.template.querySelector(errorClass)?.classList.add("not-display-div") : undefined;
                            errorClass ? this.template.querySelector(errorClass).innerText = '' : undefined;
                            event.target?.classList.remove("input-error-border");
                            event.preventDefault();
                        }else{
                            event.target.value = emailString;
                            let errorClass = '';
                            if(typeOfEmail === "to"){
                                this.isToError=true;
                                errorClass = ".to-error-div";
                            }
                            if(typeOfEmail === "cc"){
                                this.isCcError=true;
                                errorClass = ".cc-error-div";
                            }
                            if(typeOfEmail === "bcc"){
                                this.isBccError=true;
                                errorClass = ".bcc-error-div";
                            }

                            errorClass ? this.template.querySelector(errorClass).innerText = 'Please Enter valid Email..' : undefined;
                            errorClass ? this.template.querySelector(errorClass)?.classList.remove("not-display-div") : undefined;
                            event.target?.classList.add("input-error-border");
                        }
                    }
                })
            }
        }catch (e) {
            errorDebugger('generateDocument', 'handleToEmailChange', e, 'error');
        }
    }

    handleRemoveAddedEmail(event){
        try{
            this.showSpinner = true;
            let index = event.currentTarget.dataset.index;
            let typeOfEmail = event.currentTarget.dataset.type;
            if(typeOfEmail === "to"){
                this.toEmails.splice(index, 1);
                this.validateToEmails();
            }
            typeOfEmail === "cc" ? this.ccEmails.splice(index, 1) : undefined;
            typeOfEmail === "bcc" ? this.bccEmails.splice(index, 1) : undefined;        
        }catch (e) {
            errorDebugger('generateDocument', 'handleRemoveAddedEmail', e, 'error');
        }finally{
            this.showSpinner = false;
        }
    }

    validateToEmails(){
        try{
            if(this.toEmails.length <1){
                this.template.querySelector(".to-input").classList.add("input-error-border");
                this.template.querySelector(".to-error-div").innerText = 'There must be at least one recipient..';
                this.template.querySelector(".to-error-div").classList.remove("not-display-div");
            }else{
                this.template.querySelector(".to-input").classList.remove("input-error-border");
                this.template.querySelector(".to-error-div").innerText = '';
                this.template.querySelector(".to-error-div").classList.add("not-display-div");
            }
        }catch(e){
            errorDebugger('generateDocument', 'validateToEmails', e, 'error');
        }
    }

    handleSubjectChange(event){
        try{
            this.showSpinner = true;
            this.emailSubject = event.target.value;
        }catch (e) {
            errorDebugger('generateDocument', 'handleSubjectChange', e, 'error');
        }finally{
            this.showSpinner = false;
        }
    }

    handleBodyChange(event){
        try{
            this.showSpinner = true;
            this.emailBody = event.target.value;
        }catch (e) {
            errorDebugger('generateDocument', 'handleBodyChange', e, 'error');
        }finally{
            this.showSpinner = false;
        }
    }

    handlePlainBodyChange(event){
        try {
            this.emailBody = event.target.value;
        } catch (e) {
            errorDebugger('generateDocument', 'handlePlainBodyChange', e, 'error');
        }
    }

    handleEmailTemplateSelect(event) {
        try {
            this.selectedEmailTemplate = event.detail[0];
            if(this.selectedEmailTemplate){
                this.template.host.style.setProperty('--display-for-email-body-div',"none");
                this.template.host.style.setProperty('--display-for-email-preview-div',"flex");
                this.previewEmailBody = this.allEmailTemplates.find(item => item.Id === this.selectedEmailTemplate)?.HtmlValue;
                this.emailSubject = this.allEmailTemplates.find(item => item.Id === this.selectedEmailTemplate)?.Subject || this.emailSubject;
            }else{
                this.emailSubject = '';
                this.template.host.style.setProperty('--display-for-email-body-div',"flex");
                this.template.host.style.setProperty('--display-for-email-preview-div',"none");
            }
        } catch (e) {
            errorDebugger('generateDocument', 'handleEmailTemplateSelect', e, 'error');
        }
    }

    handleViewAsTypeSelect(event) {
        try {
            if(this.selectedViewAsType !== event.detail[0]){
                this.selectedViewAsType = event.detail[0];
                if(this.selectedViewAsType === "plain"){
                    this.isPlainEmailBody = true;
                    this.template.host.style.setProperty('--display-of-the-rich-text',"none");
                }else{
                    this.isPlainEmailBody = false;
                    this.template.host.style.setProperty('--display-of-the-rich-text',"unset");
                }
            }
        } catch (e) {
            errorDebugger('generateDocument', 'handleViewAsTypeSelect', e, 'error');
        }
    }

    //Used for list of all the templates screen

    handleOptionSelection(event){
        try {
            this.showSpinner = true;
            let section = event.currentTarget.dataset.section;
            let option = event.currentTarget.dataset.item;
            let index = event.currentTarget.dataset.index;
            if(section==="type"){
                if(!this.selectedTemplate && this.isCalledFromDefaults){
                    return;
                }
                if(this.isCSVTemplate){
                    !this.csvDocumentTypes[index].isSelected ? this.csvDocumentTypes.forEach(dt => dt.isSelected = false) : undefined;
                    this.csvDocumentTypes[index].isSelected = true;
                }else{
                    !this.generalDocumentTypes[index].isSelected ? this.generalDocumentTypes.forEach(dt => dt.isSelected = false) : undefined;
                    this.generalDocumentTypes[index].isSelected = true;
                }
            }else if(section==='iStorage'){
                !this.internalStorageOptions[index].isDisabled ? this.internalStorageOptions[index].isSelected = !this.internalStorageOptions[index].isSelected : undefined;
                if(this.internalStorageOptions[index].name==='Documents'){
                    this.showFolderSelection = this.internalStorageOptions[index].isSelected;
                    if(this.showFolderSelection) this.selectedFolder = this.selectedFolder ? this.selectedFolder : this.allFolders[0]?.value;
                }
            }else if(section==='eStorage'){
                !this.externalStorageOptions[index].isDisabled ? this.externalStorageOptions[index].isSelected = !this.externalStorageOptions[index].isSelected : undefined;
            }else if(section==='output'){
                this.outputChannels[index].isSelected = !this.outputChannels[index].isSelected;
                if(option==="Email"){
                    this.showEmailSection = this.outputChannels[index].isSelected;
                    this.template.querySelector('.email-create-div').style.display = this.showEmailSection ? 'unset' : 'none';
                    if(this.showEmailSection){
                        this.ccEmails.length>0 ? this.showCC=true : this.showCC= false;
                        this.bccEmails.length>0 ? this.showBCC=true : this.showBCC = false;
                        let mainDiv = this.template.querySelector('.main-container');
                        mainDiv.scrollTo({
                            top: mainDiv.scrollHeight,
                            left: 0,
                            behavior: "smooth",
                            });
                    }
                }
            }
        } catch (e) {
            errorDebugger('generateDocument', 'handleOptionSelection', e, 'error');
        }finally{
            this.showSpinner = false;
        }
    }

    handleTemplateSearch(event){
        this.templateSearchKey = event.target.value;
    }

    handleTemplateSelection(event){
        try{
            this.selectedTemplate = event.currentTarget.dataset.value;
            this.fileName = this.selectedTemplate;
            this.handleSelectTemplate({detail:[{Id: this.selectedTemplate}]});
            this.backToGenerate();
        }catch(e){
            errorDebugger('generateDocument', 'handleTemplateSelection', e, 'error');
        }
    }

    handleTemplateEditClick(event){
        try{
            this.selectedTemplate = event.currentTarget.dataset.value;
            this.handleEditClick();
        }catch(e){
            errorDebugger('generateDocument', 'handleTemplateEditClick', e, 'error');
        }
    }

    //Bottom Button Controls

    handleClose(){
        window?.removeEventListener('message', this.simpleTempFileGenResponse);
        if(this.currentPageReference.type === "standard__quickAction"){
            this.dispatchEvent(new CloseActionScreenEvent())
        }else if(this.showCloseButton){ 
            if(this.isCalledFromPreview){
                this.dispatchEvent(new CustomEvent('close'));
            }else{
                location.replace(location.origin + '/lightning/o/' + this.internalObjectApiName + '/list' ,"_self");
            }
        }
    }

    handlePreview(){
        if(this.isCSVTemplate){
            this.showCSVPreview = true;
        }else if(this.templateType === 'Google Doc Template'){
            this.showSimplePreview = true;
        }else if(this.templateType === 'Simple Template'){
            this.showSimplePreview = true;
        }

    }

    generateActivity() {
        return new Promise((resolve, reject) => {
            try {
                upsertActivity({ activity: this.activity })
                    .then((result) => {
                        if(result){
                            this.activity.Id = result;
                            resolve(true);
                        }else{
                            reject('There was an error creating an activity for generation, please go back and try again...');
                        }
                    })
                    .catch((e) => {
                        errorDebugger('generateDocument', 'generateActivity > upsertActivity', e, 'error');
                        reject(e);
                    });
            } catch (e) {
                errorDebugger('generateDocument', 'generateActivity', e, 'error');
                reject(e);
            }
        });
    }

    handleGenerate() {
        this.showSpinner = true;
    
        if (this.selectedChannels.length < 1) {
            this.showToast('error', 'Something Went Wrong!', 'Please select at least 1 storage or output channel.', 5000);
            this.showSpinner = false;
            return;
        }
    
        if (this.showEmailSection && this.toEmails.length < 1) {
            this.validateToEmails();
            this.showToast('error', 'Something Went Wrong!', 'Please select at least one recipient to send email.', 5000);
            this.showSpinner = false;
            return;
        }
    
        if (this.selectedChannels.includes('Documents') && !this.selectedFolder) {
            this.showSpinner = false;
            this.showToast('error', 'Something Went Wrong!', 'Please select folder to save document.', 5000);
            return;
        }
        this.activity.DocGenius_Template__c = this.selectedTemplate;
        this.activity.Selected_Channels__c = this.selectedChannels.join(',');
        this.activity.File_Name__c = this.fileName + this.selectedExtension;
        this.generateActivity()
        .then((result) => {
            if(result){
                // Handle CSV template
                if (this.isCSVTemplate) {
                    this.showSpinner = true;
                    this.handleGenerateCSVData()
                    .catch((e) => {
                        ['Download', 'Notes & Attachments', 'Documents', 'Files', 'Chatter', 'Email', 'Google Drive', 'AWS', 'One Drive', 'Dropbox'].forEach(key => this.failed[key] = 'Error in Creating File => '+ e?.message || e?.body?.message || JSON.stringify(e) || 'Unknown Error');
                        this.handleGenerationResult();
                    })
                }
            
                // Handle Google Doc template
                if (this.templateType === 'Google Doc Template') {
                    this.showSpinner = true;
                    this.generateGoogleDoc();
                }
            
                // Handle Simple Template
                if (this.templateType === 'Simple Template') {
                    this.showSpinner = true;
                    this.generateSimpleTemplateFile();
                }
            }else{
                this.showWarningPopup('error', 'Something went wrong!', 'The activity couldn\'t be created for generation, please go back and try again...');
                this.isClosableError = true;
            }
        })
        .catch((e) => {
            ['Download', 'Notes & Attachments', 'Documents', 'Files', 'Chatter', 'Email', 'Google Drive', 'AWS', 'One Drive', 'Dropbox'].forEach(key => this.failed[key] = e?.message);
            this.showWarningPopup('error', 'Something went wrong!', e);
                this.isClosableError = true;
        })
    }

    stopSpinner(){
        this.showSpinner = false;
    }

    //Back to generate
    backToGenerate(){
        this.showAllTemplates = false;
        this.showCSVPreview = false;
        this.showGDocPreview = false;
        this.showSimplePreview = false;
    }

//-------------------------------------------------------CSV Preview / Generation Methods --------------------------------------------------------    

    handleGenerateCSVData() {
        this.showSpinner = true;
        return new Promise((resolve, reject) => {
            try {
                getTemplateData({ templateId: this.selectedTemplate })
                .then(data => {
                    if (!data) {
                        this.showToast('error', 'Something went wrong!', 'Nothing to generate, Please Update the Template...', 5000);
                        return;
                    }
                    let fieldNames = data?.fields?.split(',');
                    let query = data?.query;
                    this.sessionId = data?.sessionId;
                    if(!fieldNames || fieldNames?.length < 1){
                        this.showToast('error', 'Something went wrong!', 'No Columns Selected, Please Update the Template...', 5000);
                        return;
                    }
                    const generationCount = data?.count || 1000000;
    
                    if (this.selectedExtension === ".csv") {
                        let csvContent = '';
                        if (this.isAdditionalInfo) {
                            const thisTemplate = this.allTemplates.find(opt => opt.Id === this.selectedTemplate);
                            thisTemplate.MVDG__Description__c = thisTemplate.MVDG__Description__c || 'No Description Available for this template';
                            csvContent += 'Name : ,"' + thisTemplate.MVDG__Template_Name__c + '"\n'
                                + 'Description : ,"' + thisTemplate.MVDG__Description__c + '"\n'
                                + 'Object Api Name : ,' + thisTemplate.MVDG__Object_API_Name__c + '\n'
                                + 'CSV Creation Time : , ' + new Date().toLocaleString().replace(',', ' ') + '\n\n';
                        }
                        csvContent += fieldNames.join(',') + '\n';
    
                        const newQuery = '/services/data/v59.0/query/?q=' + query.split('LIMIT')[0];
    
                        this.fetchRecords(newQuery, this.sessionId, generationCount)
                        .then(isSuccess => {
                            if (isSuccess) {
                                if (this.fetchedResults.length === 0) {
                                    this.showToast('warning', 'Oops! No matching records Found!', 'Uh Oh!, Try changing the Filter criteria!!');
                                } else {
                                    this.fetchedResults.forEach((record) => {
                                        const rowValues = fieldNames.map(fieldName => {
                                            const value = this.getValueByKey(record, fieldName);
                                            return value ? `"${value}"` : '""';
                                        });
                                        csvContent += rowValues.join(',') + '\n';
                                    })
                                    this.generatedCSVData = csvContent;
                                }
                                this.generateCSVDocument();
                                resolve();
                            }
                            reject();
                        })
                        .catch(e => {
                            reject(e);
                            errorDebugger('generateDocument', 'handleGenerateCSVData > fetchRecords > csv', e, 'error');
                            this.showToast('error', 'Oops! Something went wrong', 'Please make sure you have trusted url from user guide in effect...', 5000);
                        });
                    } else if (this.selectedExtension === '.xls') {
                        let xlsContent = '<table>';
                        xlsContent += '<style>';
                        xlsContent += 'table, th, td {';
                        xlsContent += '    border: 0.5px solid black;';
                        xlsContent += '    border-collapse: collapse;';
                        xlsContent += '}';          
                        xlsContent += '</style>';
    
                        if (this.isAdditionalInfo) {
                            const thisTemplate = this.allTemplates.find(opt => opt.Id === this.selectedTemplate);
                            thisTemplate.MVDG__Description__c = thisTemplate.MVDG__Description__c || 'No Description Available for this template';
                            xlsContent += '<tr> <th> Name : </th><td> ' + thisTemplate.MVDG__Template_Name__c + '</td></tr>'
                                + '<tr> <th> Description : </th><td> ' + thisTemplate.MVDG__Description__c + '</td></tr>'
                                + '<tr> <th> Object Api Name : </th><td> ' + thisTemplate.MVDG__Object_API_Name__c + '</td></tr>'
                                + '<tr> <th> CSV Creation Time : </th><td> ' + new Date().toLocaleString().replace(',', ' ') + '</td></tr>' + '<tr></tr>';
                        }
                        xlsContent += '<tr> <th> ' + fieldNames.join('</th><th>') + '</th> </tr>';
    
                        const newQuery = '/services/data/v59.0/query/?q=' + query.split('LIMIT')[0];
    
                        this.fetchRecords(newQuery, this.sessionId, generationCount)
                        .then(isSuccess => {
                            this.labelOfLoader = 'Arranging data...';
                            if (isSuccess) {
                                if (this.fetchedResults.length === 0) {
                                    this.showToast('warning', 'Oops! No matching records Found!', 'Uh Oh!, Try changing the Filter criteria!!');
                                } else {
                                    this.fetchedResults.forEach((record) => {
                                        const rowValues = fieldNames.map(fieldName => {
                                            const value = this.getValueByKey(record, fieldName);
                                            return value ? `${value}` : '';
                                        });
                                        xlsContent += '<tr> <td> ' + rowValues.join('</td><td>') + '</td> </tr> </br>';
                                    })
                                    xlsContent += '</table>';
                                    this.generatedCSVData = xlsContent;
                                }
                                this.generateCSVDocument();
                                resolve();
                            }
                            reject();
                        })
                        .catch(e => {
                            reject(e);
                            errorDebugger('generateDocument', 'handleGenerateCSVData > fetchRecords  > xls', e, 'error');
                            });
                    }
                })
                .catch(e => {
                    reject(e);
                    errorDebugger('generateDocument', 'getTemplateData', e, 'error');
                    this.showSpinner = false;
                });
            } catch (e) {
                reject(e);
                errorDebugger('generateDocument', 'handleGenerateCSVData', e, 'error');
                this.showSpinner = false;
                this.handleGenerationResult();
            }
        })
    }
    getValueByKey(obj, key) {
        return key.split('.').reduce((o, i) => (o ? o[i] : undefined), obj);
    }

    fetchRecords(queryURL, sessionId, limitOfRecords) {
        try{
            const myHeaders = new Headers();
            let bearerString = "Bearer " + sessionId;
            myHeaders.append("Authorization", bearerString);
            //The batch size of the record fetching can go to max 2000, it will automatically set batch size optimally if not given
            // myHeaders.append("Sforce-Query-Options", "batchSize=2000");

            const requestOptions = {
                method: "GET",
                headers: myHeaders,
                redirect: "follow"
            };

            let domainURL = location.origin;
            domainURL = domainURL.replace('lightning.force.com', 'my.salesforce.com');

            return fetch(encodeURI(domainURL + queryURL), requestOptions)
            .then(response => {
                return response.json();
            })
            .then(result => {
                if(result[0]?.errorCode){
                    let errorMessage = 'We couldn\'t fetch the records, please try again..';
                    let regex = /No such column '(\w+)' on entity '(\w+)'/;
                    let match = result[0].message.match(regex);
                    let fieldName = match ? match[1] : null;
                    let entityName = match ? match[2] : null;
                    if(match && fieldName && entityName){
                        errorMessage = 'Please check permission of the field \''+ fieldName + '\' on object \'' + entityName + '\'.';
                    }
                    this.showToast('error', result[0].errorCode.replaceAll('_', ' '), errorMessage, 5000);
                    return false;
                }
                
                let thisFetchedBatch = result.records;
                this.fetchedResults.push(...thisFetchedBatch);
                this.labelOfLoader = 'Fetching Records - ' + Math.min(Math.round(this.fetchedResults.length * 100 / limitOfRecords), 100) + '%';

                if (result.nextRecordsUrl && limitOfRecords > this.fetchedResults.length) {
                    return this.fetchRecords(result.nextRecordsUrl, sessionId, limitOfRecords);
                } else if (limitOfRecords < this.fetchedResults.length) {
                    this.fetchedResults = this.fetchedResults.slice(0, limitOfRecords);
                }
                return true;
            })
            .catch(e => {
                errorDebugger('generateDocument', 'fetchRecords > fetch', e, 'error');
                this.showToast('error', 'Sorry, The records could not be fetched!', 'We couldn\'t fetch the records, please try again..', 5000);
                return false;
            });
        } catch(e){
            errorDebugger('generateDocument', 'fetchRecords', e, 'error');
            this.showToast('error', 'Oops!, Something went wrong!', 'We couldn\'t fetch the records, please try again..');
            return false;
        }
    }

    generateCSVDocument(){
        try{
            this.resultPromises = [];
            this.showSpinner = true;
            let fileSizeInByte = (btoa(unescape(encodeURIComponent(this.generatedCSVData))).length / 4) * 3;

            if(!this.generatedCSVData){
                this.showToast('warning', ' No matching data.', 'Please try updating you filters...', 5000);
                return;
            }

            if(this.selectedChannels.includes("Download")){
                this.showSpinner = true;
                this.resultPromises.push(this.downloadCSV(this.generatedCSVData));
            }

            // Adding 5*1020*1020 for a little buffer in the data of 5 MB
            if(fileSizeInByte < 5*1020*1020 && this.selectedChannels.includes('Documents')){
                this.showSpinner = true;
                this.resultPromises.push(this.createDocument(btoa(unescape(encodeURIComponent(this.generatedCSVData)))));
            }else{
                this.failed['Documents'] = 'File Size Limit Exceeded';
            }

            if(fileSizeInByte < 25*1020*1020 && this.selectedChannels.includes('Notes & Attachments')){
                this.showSpinner = true;
                let contentType = this.selectedExtension === '.csv' ? "text/csv" : "application/vnd.ms-excel";
                this.resultPromises.push(this.createAttachments(btoa(unescape(encodeURIComponent(this.generatedCSVData))), contentType));
            }else{
                this.failed['Notes & Attachments'] = 'File Size Limit Exceeded';
            }

            if(fileSizeInByte < 37.5*1020*1020 && (this.selectedChannels.includes('Files') || this.selectedChannels.includes('Chatter') || this.selectedChannels.includes('Email') || this.selectedChannels.includes('Google Drive') || this.selectedChannels.includes('AWS') || this.selectedChannels.includes('One Drive') || this.selectedChannels.includes('Dropbox'))){
                this.showSpinner = true;
                this.labelOfLoader = 'Creating document to upload in Internal Storage...';
                this.createContentVersion(btoa(unescape(encodeURIComponent(this.generatedCSVData))))
                .then(cvId => {
                    this.labelOfLoader = 'Saving in Internal Storage...';
                    this.resultPromises.push(this.createFilesChatterEmail(cvId));
                    this.uploadToExternalStorage(cvId);
                    return Promise.all(this.resultPromises);
                })
                .then(() => {
                    this.handleGenerationResult();
                    this.fetchedResults = [];
                })
                .catch(e => {
                    this.showSpinner = false;
                    errorDebugger('generateDocument', 'generateCSVDocument > generation', e, 'error');
                })
                .finally(() => {
                    this.labelOfLoader = 'Loading...';
                    this.showSpinner = false;
                });
        
            } else {
                ['Files', 'Chatter', 'Email', 'Google Drive', 'AWS', 'One Drive', 'Dropbox'].forEach(key => this.failed[key] = 'File Size Limit Exceeded');

                Promise.all(this.resultPromises)
                .then(() => {
                    this.handleGenerationResult();
                    this.fetchedResults = [];
                })
                .catch(e => {
                    this.showSpinner = false;
                    errorDebugger('generateDocument', 'generateCSVDocument > this.resultPromises-Promises', e, 'error');
                })
                .finally(() => {
                    this.labelOfLoader = 'Loading...';
                    this.showSpinner = false;
                });
            }
        }catch(e){
            this.showSpinner =false;
            errorDebugger('generateDocument', 'generateCSVDocument', e, 'error');
        }
    }
// -=-=- Used to download the Generated CSV in the local system -=-=-
    downloadCSV(csvContent) {
        this.labelOfLoader = 'Downloading...';
        this.showSpinner = true;
        try{
            this.fetchedResults = [];
            if(!this.fileName){
                let thisTemplate = this.allTemplates.find(opt => opt.Id === this.selectedTemplate);
                this.fileName = thisTemplate.Template_Name__c;
            }
            let element ;
            if(this.selectedExtension === '.csv'){
                element = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContent);
            }else if(this.selectedExtension === '.xls'){
                element = 'data:application/vnd.ms-excel,' + encodeURIComponent(csvContent);
            }
            let link = document.createElement('a');
            link.href = element;
            link.target = '_self';
            link.download = this.fileName+ this.selectedExtension;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            this.succeeded.push('Download');
        }catch(e){
            this.failed['Download'] = e?.message;
            this.showSpinner = false;
            errorDebugger('generateDocument', 'downloadCSV', e, 'error');
        }finally{
            this.labelOfLoader = 'Loading...';
        }
    }

//------------------------------------------------------- Google DOC Generation Methods --------------------------------------------------------
   
    generateGoogleDoc(){
        try{
            this.showSpinner = true;
            this.resultPromises = [];
            this.labelOfLoader = 'Generating document...';
            this.template.querySelector('c-generate-google-doc-file')?.generateDocument(this.selectedTemplate, this.internalObjectApiName, this.recordId, this.selectedExtension);

        }catch(e){
            errorDebugger('generateDocument', 'generateGoogleDoc', e, 'error');
        }
    }
    downloadGDocTemplate(){
        try{
            this.showSpinner = true;
            this.labelOfLoader = 'Downloading...';
            const link = document.createElement('a');
            link.href = "data:application/pdf;base64,"+this.googleDocData;
            link.download = this.fileName+this.selectedExtension;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            this.labelOfLoader = 'Loading ...';
            this.succeeded.push('Download');
        }catch(e){
            this.failed['Download'] = e?.message;
            this.showSpinner = false;
            errorDebugger('generateDocument', 'downloadGDocTemplate', e, 'error');
        }
    }

    handleGoogleDocFile(event) {
        this.showSpinner = true;
        try {
            let data = event.detail.blob;
            this.labelOfLoader = 'Generating File...';
    
            if (data) {
                this.googleDocData = data;
                let fileSizeInByte = (decodeURIComponent(this.googleDocData).length / 4) * 3;
    
                if (this.selectedChannels.includes('Download')) {
                    this.resultPromises.push(this.downloadGDocTemplate());
                }
                if (fileSizeInByte < 5 * 1020 * 1020 && this.selectedChannels.includes('Documents')) {
                    this.resultPromises.push(this.createDocument(decodeURIComponent(this.googleDocData)));
                }else{
                    this.failed['Documents'] = 'File Size Limit Exceeded';
                }
                if (fileSizeInByte < 25 * 1020 * 1020 && this.selectedChannels.includes('Notes & Attachments')) {
                    let contentType = '';
                    if (this.selectedExtension === '.pdf') {
                        contentType = 'application/pdf';
                    } else if (this.selectedExtension === '.docx') {
                        contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
                    } else if (this.selectedExtension === '.ppt') {
                        contentType = 'application/vnd.ms-powerpoint';
                    }
                    this.resultPromises.push(this.createAttachments(decodeURIComponent(this.googleDocData), contentType));
                }else{
                    this.failed['Notes & Attachments'] = 'File Size Limit Exceeded';
                }
                if (fileSizeInByte < 37.5 * 1020 * 1020 && (this.selectedChannels.includes('Files') || this.selectedChannels.includes('Chatter') || this.selectedChannels.includes('Email') || this.selectedChannels.includes('Google Drive') || this.selectedChannels.includes('AWS') || this.selectedChannels.includes('One Drive') || this.selectedChannels.includes('Dropbox'))) {
                    this.showSpinner = true;
                    this.createContentVersion(decodeURIComponent(this.googleDocData))
                    .then(cvId => {
                        this.labelOfLoader = 'Saving in Internal Storage...';
                        this.resultPromises.push(this.createFilesChatterEmail(cvId));
                        this.uploadToExternalStorage(cvId);
                        return Promise.all(this.resultPromises);
                    })
                    .then(() => {
                        this.handleGenerationResult();
                        this.fetchedResults = [];
                    })
                    .catch(e => {
                        this.showSpinner = false;
                        errorDebugger('generateDocument', 'handleGoogleDocFile > createContentVersion', e, 'error');
                    })
                    .finally(() => {
                        this.labelOfLoader = 'Loading...';
                        this.showSpinner = false;
                    });
                }else{
                    ['Files', 'Chatter', 'Email', 'Google Drive', 'AWS', 'One Drive', 'Dropbox'].forEach(key => this.failed[key] = 'File Size Limit Exceeded');

                    Promise.all(this.resultPromises)
                    .then(() => {
                        this.handleGenerationResult();
                        this.fetchedResults = [];
                    })
                    .catch(e => {
                        this.showSpinner = false;
                        errorDebugger('generateDocument', 'handleGoogleDocFile > this.resultPromises - Promises', e, 'error');
                    })
                    .finally(() => {
                        this.labelOfLoader = 'Loading...';
                        this.showSpinner = false;
                    });
                }
    
            }else{
                ['Download', 'Notes & Attachments', 'Documents', 'Files', 'Chatter', 'Email', 'Google Drive', 'AWS', 'One Drive', 'Dropbox'].forEach(key => this.failed[key] = 'Error Generating File => '+event);
                this.handleGenerationResult();
            }
        } catch (e) {
            this.showSpinner = false;
            errorDebugger('generateDocument', 'handleGoogleDocFile', e, 'error');
        }
    }
    

    changeLabelForGDoc(){
        this.showSpinner = true;
        this.labelOfLoader = 'Almost Done...'
    }

    handleGDocError(event){
        this.showSpinner = false;
        errorDebugger('generateDocument', 'handleGDocError', event, 'error');
        ['Download', 'Notes & Attachments', 'Documents', 'Files', 'Chatter', 'Email', 'Google Drive', 'AWS', 'One Drive', 'Dropbox'].forEach(key => this.failed[key] = 'Error Creating File => '+event?.detail?.message);
        this.showToast('error', 'Something went Wrong!', 'There was error generating file, please try again.', 5000);
        this.handleGenerationResult();
    }

//-------------------------------------------------------PDF / DOC Generation Methods --------------------------------------------------------

    // Simple template docGenerate...
    generateSimpleTemplateFile(){
        try{
            this.simpleTemplate = false;
            this.labelOfLoader = "Generating document...";
            let previousSRC = this.vfGeneratePageSRC;
            let paraData2 = {
                'templateId' : this.selectedTemplate,
                'recordId' : this.recordId,
                'selectedExtension' : this.selectedExtension,
                'selectedChannels' : this.selectedChannels.join(','),
                'fileName' : this.fileName,
                'selectedFolder' : this.selectedFolder,
            }
            let paraDataStringify2 = JSON.stringify(paraData2);
            let newSRC = '/apex/MVDG__DocGeneratePage?paraData=' + encodeURIComponent(paraDataStringify2);

            if(newSRC !== previousSRC){
                this.vfGeneratePageSRC = newSRC;
                this.simpleTemplate = true;
            }
            else{
                this.vfGeneratePageSRC = '/apex/MVDG__DocGeneratePage';
                setTimeout(() => {
                    this.vfGeneratePageSRC = newSRC;
                    this.simpleTemplate = true;
                }, 300)
            }
        }
        catch(e){
            this.labelOfLoader = 'loading...';
            errorDebugger('generateDocument', 'generateSimpleTemplateFile', e, 'error');
        }
    }

    simpleTempFileGenResponse = (message) => {
        try{ 
            if(message.data.messageFrom === 'docGenerate' && message.data.completedChannel === 'unknown'){
                this.completedSimTempPros = this.selectedChannels.length;
                ['Download', 'Notes & Attachments', 'Documents', 'Files', 'Chatter', 'Email', 'Google Drive', 'AWS', 'One Drive', 'Dropbox'].forEach(key => this.failed[key] = 'Error In File Generation => '+ message.data.error?.message);
                this.simpleTemplateFileDone();
                this.showToast('error','Something went Wrong!', 'There was error creating document, please try again.', 5000);
                
            }
            else if(message.data.messageFrom === 'docGenerate' && message.data.completedChannel !== 'unknown'){
                
                if(message.data.completedChannel === 'Download' || message.data.completedChannel === 'Documents' || message.data.completedChannel === 'Notes & Attachments'){
                    
                    if(message.data.status){
                        this.succeeded.push(message.data.completedChannel);
                    }else{
                        this.failed[message.data.completedChannel] = message.data.error?.message;
                    }
                    this.completedSimTempPros++;
                    this.simpleTemplateFileDone();
                }else if(message.data.completedChannel === 'External Storage'){
                    let cvId = message.data.cvId;
                    if(cvId){
                        this.resultPromises.push(this.createFilesChatterEmail(cvId));
                        this.uploadToExternalStorage(cvId);
                    }else{
                        ['Files', 'Chatter', 'Email', 'Google Drive', 'AWS', 'One Drive', 'Dropbox'].forEach(key => this.failed[key] = message.data.error?.message);
                        this.showToast('error', 'Something Went wrong!', 'The Document couldn\'t be created!', 5000);
                    }
                    this.handleGenerationResult();
                }
            }
        }catch(e){
            errorDebugger('generateDocument', 'simpleTempFileGenResponse', e, 'error');
        }
    }

    simpleTemplateFileDone(){
        if(this.selectedChannels.length === this.completedSimTempPros){
            this.showSpinner = false;
            // this.failed = this.selectedChannels.filter((item) => !this.succeeded.includes(item));
            this.simpleTemplate = false;
            this.completedSimTempPros = 0;
            this.handleGenerationResult();
        }
    }

// ------------------------------------------------------- Folder Selection Methods ----------------------------------------------------

    handleFolderSelect(event){
        this.selectedFolder = event.detail[0];
    }

// --------------------------------------------------- Mutual Document Generation Methods ----------------------------------------------------

    createDocument(fileData) {
        try {
            this.showSpinner = true;
            this.labelOfLoader = 'Saving in Internal Storage...';

            getSessionId()
                .then(sessionId => {
                    if (!sessionId) {
                        errorDebugger('generateDocument', 'createDocument > getSessionId', 'Session ID not obtained', 'error');
                        this.showSpinner = false;
                        throw new Error('Session ID not obtained');
                    }

                    const domainURL = location.origin.replace('lightning.force.com', 'my.salesforce.com');
                    const myHeaders = new Headers();
                    myHeaders.append("Authorization", "Bearer " + sessionId);
                    myHeaders.append("Content-Type", "application/json");

                    const raw = JSON.stringify({
                        "Name": this.fileName,
                        "Type": this.selectedExtension.split(".")[1],
                        "FolderId": this.selectedFolder,
                        "Body": fileData
                    });

                    const requestOptions = {
                        method: 'POST',
                        headers: myHeaders,
                        body: raw,
                        redirect: 'follow'
                    };

                    const queryURL = "/services/data/v61.0/sobjects/Document";

                    return fetch(encodeURI(domainURL + queryURL), requestOptions);
                })
                .then(response => response.json())
                .then(result => {
                    
                    if (result.success) {
                        this.succeeded.push('Documents');
                    }else{
                        this.failed['Documents'] ='Error Code => '+  result[0]?.errorCode + '\n Error Message =>  ' + result[0]?.message + '\n Error Fields (if any) => ' + result[0]?.fields ;
                    }
                })
                .catch(e => {
                    this.showSpinner = false;
                    errorDebugger('generateDocument', 'createDocument > fetch', e, 'error');
                })
                .finally(() => {
                    this.labelOfLoader = 'Loading...';
                });
        } catch (e) {
            this.showSpinner = false;
            errorDebugger('generateDocument', 'createDocument', e, 'error');
        }
    }

    createAttachments(fileData, contentType) {
        try {
            this.showSpinner = true;
            this.labelOfLoader = 'Saving in Internal Storage...';
    
            getSessionId()
                .then(sessionId => {
                    if (!sessionId) {
                        errorDebugger('generateDocument', 'createAttachments > getSessionId', 'Session ID not obtained', 'error');
                        this.showSpinner = false;
                        throw new Error('Session ID not obtained'); 
                    }
    
                    const domainURL = location.origin.replace('lightning.force.com', 'my.salesforce.com');
                    const myHeaders = new Headers();
                    myHeaders.append("Authorization", "Bearer " + sessionId);
                    myHeaders.append("Content-Type", "application/json");
    
                    const raw = JSON.stringify({
                        "Name": this.fileName + this.selectedExtension,
                        "ParentId": this.recordId,
                        "contentType": contentType,
                        "Body": fileData
                    });
    
                    const requestOptions = {
                        method: 'POST',
                        headers: myHeaders,
                        body: raw,
                        redirect: 'follow'
                    };
    
                    const queryURL = "/services/data/v61.0/sobjects/Attachment";
    
                    return fetch(encodeURI(domainURL + queryURL), requestOptions);
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        this.succeeded.push('Notes & Attachments');
                    }else{
                        this.failed['Notes & Attachments'] ='Error Code => '+  result[0]?.errorCode + '\n Error Message =>  ' + result[0]?.message + '\n Error Fields (if any) => ' + result[0]?.fields ;
                    }
                })
                .catch(e => {
                    this.showSpinner = false;
                    errorDebugger('generateDocument', 'createAttachments > fetch', e, 'error');
                })
                .finally(() => {
                    this.labelOfLoader = 'Loading...';
                });
        } catch (e) {
            this.showSpinner = false;
            errorDebugger('generateDocument', 'createAttachments', e, 'error');
        }
    }

    addToFiles(cvId) {
        return new Promise((resolve) => {
            try {
                this.showSpinner = true;
                this.labelOfLoader = 'Saving in Internal Storage...';
        
                if (!this.isCSVTemplate) {
                    storeInFiles({ combinedData: {contentVersionId: cvId, recordId: this.recordId ? this.recordId : this.selectedTemplate, activityId : this.activity.Id} })
                    .then((result) => {
                        if(result === 'success'){
                            this.succeeded.push('Files');
                            resolve();
                        }else{
                            this.failed['Files'] = result;
                            errorDebugger('generateDocument', 'addToFiles > storeInFiles > failure', result, 'error');
                            this.showSpinner = false;
                            resolve();
                        }
                    })
                    .catch(e => {
                        errorDebugger('generateDocument', 'addToFiles > storeInFiles > failure', e, 'error');
                    });
                }else{
                    this.succeeded.push('Files');
                    resolve();
                }
            } catch (e) {
                errorDebugger('generateDocument', 'addToFiles', e, 'error');
                this.showSpinner = false;
                resolve();
            }
        })
    }

    addToChatter(cvId) {
        return new Promise((resolve) => {
            try {
                this.showSpinner = true;
                this.labelOfLoader = 'Saving in Internal Storage...';
                let bodyString = 'Generated "' + this.fileName + this.selectedExtension + '".';
                postToChatter({ combinedData: { contentVersionId: cvId, recordId: this.recordId, body: bodyString, activityId : this.activity.Id }})
                .then((result) => {
                    if(result === 'success'){
                        this.succeeded.push('Chatter');
                        if (this.selectedChannels.includes('Files')) {
                            this.succeeded.push('Files');
                        }
                        resolve();
                    }else{
                        this.failed['Chatter'] = result;
                        errorDebugger('generateDocument', 'addToChatter > postToChatter > failure', result, 'error');
                        if (this.selectedChannels.includes('Files')) {
                            this.resultPromises.push(
                                this.addToFiles(cvId)
                                .then(() => {
                                    resolve();
                                })
                                .catch(() => {
                                    resolve();
                                })
                            );
                        }else{
                            resolve();
                        }
                    }
                })
                .catch((e)=>{
                    this.failed['Chatter'] = e;
                    this.failed['Files'] = e;
                    errorDebugger('generateDocument', 'addToChatter > postToChatter', e, 'error');
                })
            } catch (e) {
                errorDebugger('generateDocument', 'addToChatter', e, 'error');
                this.showSpinner = false;
                resolve();
            }
        })
    }

    sendWithEmail(cvId) {
        return new Promise((resolve) => {
            try {
                this.showSpinner = true;
                this.labelOfLoader = 'Sending email...';
        
                let emailData = {
                    contentVersionId: cvId,
                    emailSubject: this.emailSubject,
                    emailBody: this.selectedEmailTemplate ? this.allEmailTemplates.find(item => item.Id === this.selectedEmailTemplate).HtmlValue : this.emailBody
                };
                let allEmails = {
                    toEmails: this.toEmails,
                    ccEmails: this.ccEmails,
                    bccEmails: this.bccEmails
                }
        
                sendEmail({ allEmails:allEmails, emailData:emailData, activityId : this.activity.Id })
                .then(() => {
                    this.succeeded.push('Email');
                    resolve();
                })
                .catch(e => {
                    this.failed['Email'] = e?.body?.message;
                    errorDebugger('generateDocument', 'sendWithEmail > sendEmail', e, 'error');
                    this.showSpinner = false;
                    resolve();
                });
            } catch (e) {
                errorDebugger('generateDocument', 'sendWithEmail', e, 'error');
                this.showSpinner = false;
                resolve();
            }
        })
    }

    createContentVersion(fileData) {
        this.showSpinner = true;
        this.labelOfLoader = 'Generating File...';
    
        return getSessionId()
            .then(sessionId => {
                if (!sessionId) {
                    errorDebugger('generateDocument', 'createContentVersion > getSessionId', 'Session ID not obtained', 'error');
                    this.showSpinner = false;
                    throw new Error('Session ID not obtained');
                }
    
                const domainURL = location.origin.replace('lightning.force.com', 'my.salesforce.com');
                const myHeaders = new Headers();
                myHeaders.append("Authorization", "Bearer " + sessionId);
                myHeaders.append("Content-Type", "application/json");
    
                const raw = JSON.stringify({
                    "title": this.fileName,
                    "PathOnClient": this.fileName + this.selectedExtension,
                    "versionData": fileData
                });
    
                const requestOptions = {
                    method: "POST",
                    headers: myHeaders,
                    body: raw,
                    redirect: "follow"
                };
    
                const queryURL = "/services/data/v61.0/sobjects/ContentVersion";
                return fetch(encodeURI(domainURL + queryURL), requestOptions);
            })
            .then(response => response.json())
            .then(result => {
                if (!result.success || !result.id) {
                    this.showToast('error', 'Something went wrong!', 'Couldn\'t create the document, please try again.', 5000);
                    throw new Error('Failed to create content version');
                }
                return result.id;
            })
            .catch(e => {
                errorDebugger('generateDocument', 'createContentVersion > fetch', e, 'error');
                this.showSpinner = false;
            })
            .finally(() => {
                this.labelOfLoader = 'Loading...';
            });
    }

    createFilesChatterEmail(contentVersionId) {
        try {
            this.showSpinner = true;
    
            if (this.selectedChannels.includes('Chatter')) {
                this.resultPromises.push(this.addToChatter(contentVersionId));
            } else if (this.selectedChannels.includes('Files')) {
                this.resultPromises.push(this.addToFiles(contentVersionId));
            }
    
            if (this.selectedChannels.includes('Email')) {
                this.resultPromises.push(this.sendWithEmail(contentVersionId));
            }
        } catch (e) {
            errorDebugger('generateDocument', 'createFilesChatterEmail', e, 'error');
            this.showSpinner = false;
        }
    }

    uploadToExternalStorage(contentVersionId){
        try {
            if(this.selectedChannels.includes('Google Drive')){
                this.succeeded.push('Google Drive');
                uploadToGoogleDrive({cvid : contentVersionId});
            }
            if(this.selectedChannels.includes('AWS')){
                this.succeeded.push('AWS');
                uploadToAWS({cvid : contentVersionId});
            }
            if(this.selectedChannels.includes('One Drive')){
                this.succeeded.push('One Drive');
                uploadToOneDrive({cvid : contentVersionId});
            }
            if(this.selectedChannels.includes('Dropbox')){
                this.succeeded.push('Dropbox');
                uploadToDropBox({ cvid : contentVersionId});
            }
            if(!(this.selectedChannels.includes('Files') || this.selectedChannels.includes('Chatter') || this.selectedChannels.includes('Email')) && (this.selectedChannels.includes('Dropbox') || this.selectedChannels.includes('One Drive') || this.selectedChannels.includes('Google Drive') || this.selectedChannels.includes('AWS'))){
                deleteContentVersion({cvId: contentVersionId});
            }
        } catch (e) {
            errorDebugger('generateDocument', 'uploadToExternalStorage', e, 'error');
        }
    }

    handleGenerationResult() {
        try {
            Promise.all(this.resultPromises)
                .then(() => {
                    let combinedLists = {
                        succeeded : [],
                        inProgress : []
                    }
                    let combinedMaps = {
                        failed : {},
                        templateData : {
                            'name' : this.templateName,
                            'type' : this.templateType,
                            'object' : this.internalObjectApiName,
                            'fileName' : this.fileName + this.selectedExtension
                        }
                    }
                    this.selectedChannels.forEach(channel => {
                        if (this.failed[channel] && !this.succeeded.includes(channel)){
                           combinedMaps.failed[channel] = this.failed[channel];
                        } else if(['Google Drive', 'AWS', 'One Drive', 'Dropbox'].includes(channel)){
                            combinedLists.inProgress.push(channel);
                            this.succeeded = this.succeeded.filter(item => !item.includes(channel));
                        } else if (!this.succeeded.includes(channel)) {
                            combinedMaps.failed[channel] = 'Internal Error';
                        }
                    });

                    this.failed = {...combinedMaps.failed};
                    combinedLists.succeeded = this.succeeded;
                    
                    Object.keys(this.failed).forEach(key => {
                        this.activity[key.replaceAll(' & ', '_').replaceAll(' ', '_') + '__c'] = this.failed[key];
                    });
                    this.succeeded.forEach(item => {
                        this.activity[item.replaceAll(' & ', '_').replaceAll(' ', '_') + '__c'] = 'Success';
                    });
                    this.generateActivity();
                    
                    this.handleClose();
                    this.showSpinner = false;
                })
                .catch(e => {
                    this.showSpinner = false;
                    errorDebugger('generateDocument', 'handleGenerationResult > this.resultPromises - Promises', e, 'error');
                });
        } catch (e) {
            this.showSpinner = false;
            errorDebugger('generateDocument', 'handleGenerationResult', e, 'error');
        }
    }
    

// -------------------------------------------------------- Default Set Methods -------------------------------------------------------- 

    handleSetDefaults(){
        try{
            this.showSpinner = true;
            if(!this.buttonLabel){
                this.showToast('error', 'Something Went Wrong!', 'Please enter the name for the button.', 5000);
                return;
            }
            if(!this.buttonLabel.trim()[0].match(/[a-zA-Z]/i)){
                this.showToast('error', 'Something went wrong!','This first letter of name, should be an alphabet.!', 5000)
                return;
            }

            if(!this.isOldButton && this.allButtons.includes(this.buttonLabel.trim().replace(/[^a-zA-Z_]+/g, '_'))){
                this.showToast('error', 'Something went wrong!','This button name is used, try changing name!', 5000)
                return;
            }
            if(this.selectedChannels.length < 1){
                this.showToast('error', 'Something Went Wrong!', 'Please select at least 1 storage or output channel.', 5000);
                return;
            }
            if(this.showEmailSection && this.toEmails.length < 1){
                this.validateToEmails();
                this.showToast('error', 'Something Went Wrong!', 'Please select at least one recipient to send email.', 5000);
                return;
            }
            if(this.selectedChannels.includes('Documents') && !this.selectedFolder){
                this.showSpinner = false;
                this.showToast('error', 'Something Went Wrong!', 'Please select folder to save document.', 5000);
                return;
            }
            let allEmailsString = '';
            allEmailsString += (this.toEmails.length>0 ? this.toEmails.join(', ') : '') + '<|DGE|>' + (this.ccEmails.length>0 ? this.ccEmails.join(', ') : '') + '<|DGE|>' + (this.bccEmails.length>0 ? this.bccEmails.join(', '): '');
            let iStorages = this.internalStorageOptions.filter(item => item.isSelected === true).map(item => {return item.name}).join(', ');
            let eStorages = this.externalStorageOptions.filter(item => item.isSelected === true).map(item => {return item.name}).join(', ');
            let oChannels = this.outputChannels.filter(item => item.isSelected === true).map(item => {return item.name}).join(', ');
            let defaults = {
                templateId : this.templateIdFromParent,
                buttonLabel : this.buttonLabel,
                buttonName: this.buttonName ? this.buttonName : this.buttonLabel.trim().replace(/[^a-zA-Z_]+/g, '_'),
                docType : this.selectedExtension?.slice(1,).toUpperCase(),
                iStorage : iStorages,
                eStorage : eStorages,
                oChannel : oChannels,
                emailAddresses : allEmailsString,
                emailBody : this.emailBody,
                emailSubject : this.emailSubject,
                templateType : this.templateTypeFromParent,
                emailTemplate : this.selectedEmailTemplate
            }
            setDefaultOptions({ defaultData: defaults })
            .then(()=>{
                if(!this.isOldButton){
                    if(this.isCSVTemplate){
                        let objList = [];
                        objList.push(this.internalObjectApiName);
                        let buttonData = {
                            buttonLabel: this.buttonLabel,
                            buttonName: this.buttonName ? this.buttonName : this.buttonLabel.replace(/[^a-zA-Z_]+/g, '_'),
                            buttonEndURL: '&c__isDefaultGenerate=true&c__templateIdToGenerate='+this.templateIdFromParent
                        }
                        createListViewButtons({objects: objList, buttonData : buttonData})
                        .then((isSuccess) => {
                            if(isSuccess == false){
                                this.showToast('error', 'Something went wrong!','The button couldn\'t be created with defaults!', 5000);
                            }else{
                                this.isOldButton = true;
                                this.bottomBtnLabel = 'Update Defaults';
                                this.showToast('success', 'Action Performed!','The button is created with defaults!', 5000);
                            }
                        })
                        .catch((e) => {
                            this.showToast('error', 'Something went wrong!','The button couldn\'t be created with defaults!', 5000);
                            errorDebugger('generateDocument', 'handleSetDefaults > createListViewButtons', e, 'error');
                        })
                    }else{
                        getSessionId()
                        .then((data) => {
                            let domainURL = location.origin.replace('lightning.force.com', 'my.salesforce.com');
                            let endpoint = domainURL + '/services/data/v61.0/tooling/sobjects/QuickActionDefinition';
    
                            let sessionId = data;
                            let myHeaders = new Headers();
                            myHeaders.append("Content-Type", "application/json");
                            myHeaders.append("Authorization", "Bearer "+sessionId);
    
                            let requestBody = {
                                Metadata: {
                                    label: this.buttonLabel,
                                    optionsCreateFeedItem: false,
                                    type: "LightningWebComponent",
                                    lightningWebComponent: "MVDG__generateDocument"
                                },
                                FullName: this.internalObjectApiName+'.'+defaults.buttonName
                            };
                            let requestOptions = {
                                method: 'POST',
                                headers: myHeaders,
                                body: JSON.stringify(requestBody),
                                redirect: 'follow'
                                };
                                fetch(encodeURI(endpoint), requestOptions)
                                .then(response => response.json())
                                .then(result => {
                                    if(result.success){
                                        this.isOldButton = true;
                                        this.bottomBtnLabel = 'Update Defaults'
                                        this.showToast('success', 'Action Performed!','The button is created with defaults!', 5000);
                                    }else{
                                        this.showToast('error', 'Something went wrong!','The button couldn\'t be created with defaults!', 5000);
                                    }
                                })
                                .catch(e => {
                                    this.showToast('error', 'Something went wrong!','The button couldn\'t be created with defaults!', 5000);
                                    errorDebugger('generateDocument', 'handleSetDefaults > fetch (create quick action button)', e, 'error');
                                });
                            })
                        .catch((e)=>{
                            this.showSpinner = false;
                            this.showToast('error', 'Something went wrong!','Some technical issue occurred, please try again!', 5000);
                            errorDebugger('generateDocument', 'handleSetDefaults > getSessionId', e, 'error');
                        })
                    }
                }else{
                    this.isOldButton = true;
                    this.bottomBtnLabel = 'Update Defaults'
                    this.showToast('success', 'Action Performed!', 'The defaults for ' + this.buttonLabel + ' button is updated!', 5000);
                }
            })
            .catch(e => {
                this.showSpinner = false;
                errorDebugger('generateDocument', 'handleSetDefaults > setDefaultOptions', e, 'error');
            })
        }catch(e){
            this.showSpinner = false;
            errorDebugger('generateDocument', 'handleSetDefaults', e, 'error');
        }
    }

    handleButtonLabelChange(event){
        this.buttonLabel = event.target.value;
        if(this.buttonLabel){
            this.template.querySelector('.button-label-input').classList.remove('error-input');
            this.template.querySelector('.button-label').classList.remove('error-label');
        }else{
            this.template.querySelector('.button-label-input').classList.add('error-input');
            this.template.querySelector('.button-label').classList.add('error-label');
        }
    }


// --------------------------------------------------------General Use Methods ---------------------------------------------------------
    showToast(status, title, message, duration){
        this.showSpinner = false;
        const messageContainer = this.template.querySelector('c-message-popup')
        messageContainer.showMessageToast({
            status: status,
            title: title,
            message : message,
            duration : duration
        });
    }

    showWarningPopup(status, title, message){
        this.showSpinner = false;
        const messageContainer = this.template.querySelector('c-message-popup')
        messageContainer.showMessagePopup({
            status: status,
            title: title,
            message : message,
        });
    }

    navigateToComp(componentName, paramToPass){
        try {
            let cmpDef;
            if(paramToPass && Object.keys(paramToPass).length > 0){
                cmpDef = {
                    componentDef: `${nameSpace}:${componentName}`,
                    attributes: paramToPass,
                };
            }
            else{
                cmpDef = {
                    componentDef: `${nameSpace}:${componentName}`,
                };
            }
            
            let encodedDef = btoa(JSON.stringify(cmpDef));
            this[NavigationMixin.Navigate]({
                type: "standard__webPage",
                attributes: {
                url:  "/one/one.app#" + encodedDef
                }
            });
        } catch (e) {
            errorDebugger('generateDocument', 'navigateToComp', e, 'error');
        }
    }
}